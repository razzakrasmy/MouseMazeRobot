
MouseMaze2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f34  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080040c0  080040c0  000140c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004108  08004108  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004108  08004108  00014108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004110  08004110  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004110  08004110  00014110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004114  08004114  00014114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000000c  08004124  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08004124  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f64d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f39  00000000  00000000  0002f6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  00031608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bb6  00000000  00000000  000324f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020898  00000000  00000000  000330a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010928  00000000  00000000  0005393e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c94a2  00000000  00000000  00064266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003eb0  00000000  00000000  0012d708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001315b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080040a8 	.word	0x080040a8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080040a8 	.word	0x080040a8

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004ce:	2300      	movs	r3, #0
 80004d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004d2:	2003      	movs	r0, #3
 80004d4:	f000 f93c 	bl	8000750 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004d8:	2000      	movs	r0, #0
 80004da:	f000 f80d 	bl	80004f8 <HAL_InitTick>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d002      	beq.n	80004ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004e4:	2301      	movs	r3, #1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	e001      	b.n	80004ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ea:	f003 fc1d 	bl	8003d28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004ee:	79fb      	ldrb	r3, [r7, #7]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000500:	2300      	movs	r3, #0
 8000502:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000504:	4b17      	ldr	r3, [pc, #92]	; (8000564 <HAL_InitTick+0x6c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d023      	beq.n	8000554 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800050c:	4b16      	ldr	r3, [pc, #88]	; (8000568 <HAL_InitTick+0x70>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b14      	ldr	r3, [pc, #80]	; (8000564 <HAL_InitTick+0x6c>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051a:	fbb3 f3f1 	udiv	r3, r3, r1
 800051e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f949 	bl	80007ba <HAL_SYSTICK_Config>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d10f      	bne.n	800054e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b0f      	cmp	r3, #15
 8000532:	d809      	bhi.n	8000548 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000534:	2200      	movs	r2, #0
 8000536:	6879      	ldr	r1, [r7, #4]
 8000538:	f04f 30ff 	mov.w	r0, #4294967295
 800053c:	f000 f913 	bl	8000766 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000540:	4a0a      	ldr	r2, [pc, #40]	; (800056c <HAL_InitTick+0x74>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6013      	str	r3, [r2, #0]
 8000546:	e007      	b.n	8000558 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000548:	2301      	movs	r3, #1
 800054a:	73fb      	strb	r3, [r7, #15]
 800054c:	e004      	b.n	8000558 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800054e:	2301      	movs	r3, #1
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	e001      	b.n	8000558 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000554:	2301      	movs	r3, #1
 8000556:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000558:	7bfb      	ldrb	r3, [r7, #15]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000004 	.word	0x20000004
 8000568:	20000008 	.word	0x20000008
 800056c:	20000000 	.word	0x20000000

08000570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x20>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	461a      	mov	r2, r3
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_IncTick+0x24>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4413      	add	r3, r2
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <HAL_IncTick+0x24>)
 8000582:	6013      	str	r3, [r2, #0]
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000004 	.word	0x20000004
 8000594:	20000028 	.word	0x20000028

08000598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  return uwTick;
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <HAL_GetTick+0x14>)
 800059e:	681b      	ldr	r3, [r3, #0]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000028 	.word	0x20000028

080005b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f003 0307 	and.w	r3, r3, #7
 80005be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <__NVIC_SetPriorityGrouping+0x44>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c6:	68ba      	ldr	r2, [r7, #8]
 80005c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005cc:	4013      	ands	r3, r2
 80005ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005e2:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <__NVIC_SetPriorityGrouping+0x44>)
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	60d3      	str	r3, [r2, #12]
}
 80005e8:	bf00      	nop
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <__NVIC_GetPriorityGrouping+0x18>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	0a1b      	lsrs	r3, r3, #8
 8000602:	f003 0307 	and.w	r3, r3, #7
}
 8000606:	4618      	mov	r0, r3
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	2b00      	cmp	r3, #0
 8000624:	db0b      	blt.n	800063e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	f003 021f 	and.w	r2, r3, #31
 800062c:	4907      	ldr	r1, [pc, #28]	; (800064c <__NVIC_EnableIRQ+0x38>)
 800062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000632:	095b      	lsrs	r3, r3, #5
 8000634:	2001      	movs	r0, #1
 8000636:	fa00 f202 	lsl.w	r2, r0, r2
 800063a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000e100 	.word	0xe000e100

08000650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	db0a      	blt.n	800067a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	b2da      	uxtb	r2, r3
 8000668:	490c      	ldr	r1, [pc, #48]	; (800069c <__NVIC_SetPriority+0x4c>)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	0112      	lsls	r2, r2, #4
 8000670:	b2d2      	uxtb	r2, r2
 8000672:	440b      	add	r3, r1
 8000674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000678:	e00a      	b.n	8000690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4908      	ldr	r1, [pc, #32]	; (80006a0 <__NVIC_SetPriority+0x50>)
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	3b04      	subs	r3, #4
 8000688:	0112      	lsls	r2, r2, #4
 800068a:	b2d2      	uxtb	r2, r2
 800068c:	440b      	add	r3, r1
 800068e:	761a      	strb	r2, [r3, #24]
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000e100 	.word	0xe000e100
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b089      	sub	sp, #36	; 0x24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	f1c3 0307 	rsb	r3, r3, #7
 80006be:	2b04      	cmp	r3, #4
 80006c0:	bf28      	it	cs
 80006c2:	2304      	movcs	r3, #4
 80006c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	3304      	adds	r3, #4
 80006ca:	2b06      	cmp	r3, #6
 80006cc:	d902      	bls.n	80006d4 <NVIC_EncodePriority+0x30>
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3b03      	subs	r3, #3
 80006d2:	e000      	b.n	80006d6 <NVIC_EncodePriority+0x32>
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	f04f 32ff 	mov.w	r2, #4294967295
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	fa02 f303 	lsl.w	r3, r2, r3
 80006e2:	43da      	mvns	r2, r3
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	401a      	ands	r2, r3
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ec:	f04f 31ff 	mov.w	r1, #4294967295
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	fa01 f303 	lsl.w	r3, r1, r3
 80006f6:	43d9      	mvns	r1, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	4313      	orrs	r3, r2
         );
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3724      	adds	r7, #36	; 0x24
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
	...

0800070c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3b01      	subs	r3, #1
 8000718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800071c:	d301      	bcc.n	8000722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800071e:	2301      	movs	r3, #1
 8000720:	e00f      	b.n	8000742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000722:	4a0a      	ldr	r2, [pc, #40]	; (800074c <SysTick_Config+0x40>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3b01      	subs	r3, #1
 8000728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800072a:	210f      	movs	r1, #15
 800072c:	f04f 30ff 	mov.w	r0, #4294967295
 8000730:	f7ff ff8e 	bl	8000650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <SysTick_Config+0x40>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073a:	4b04      	ldr	r3, [pc, #16]	; (800074c <SysTick_Config+0x40>)
 800073c:	2207      	movs	r2, #7
 800073e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	e000e010 	.word	0xe000e010

08000750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff29 	bl	80005b0 <__NVIC_SetPriorityGrouping>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b086      	sub	sp, #24
 800076a:	af00      	add	r7, sp, #0
 800076c:	4603      	mov	r3, r0
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	607a      	str	r2, [r7, #4]
 8000772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000778:	f7ff ff3e 	bl	80005f8 <__NVIC_GetPriorityGrouping>
 800077c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	68b9      	ldr	r1, [r7, #8]
 8000782:	6978      	ldr	r0, [r7, #20]
 8000784:	f7ff ff8e 	bl	80006a4 <NVIC_EncodePriority>
 8000788:	4602      	mov	r2, r0
 800078a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078e:	4611      	mov	r1, r2
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff5d 	bl	8000650 <__NVIC_SetPriority>
}
 8000796:	bf00      	nop
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff31 	bl	8000614 <__NVIC_EnableIRQ>
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ffa2 	bl	800070c <SysTick_Config>
 80007c8:	4603      	mov	r3, r0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b087      	sub	sp, #28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007e2:	e148      	b.n	8000a76 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	2101      	movs	r1, #1
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	fa01 f303 	lsl.w	r3, r1, r3
 80007f0:	4013      	ands	r3, r2
 80007f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	f000 813a 	beq.w	8000a70 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	f003 0303 	and.w	r3, r3, #3
 8000804:	2b01      	cmp	r3, #1
 8000806:	d005      	beq.n	8000814 <HAL_GPIO_Init+0x40>
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	f003 0303 	and.w	r3, r3, #3
 8000810:	2b02      	cmp	r3, #2
 8000812:	d130      	bne.n	8000876 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	2203      	movs	r2, #3
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	43db      	mvns	r3, r3
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	4013      	ands	r3, r2
 800082a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	4313      	orrs	r3, r2
 800083c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800084a:	2201      	movs	r2, #1
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	43db      	mvns	r3, r3
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	4013      	ands	r3, r2
 8000858:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	091b      	lsrs	r3, r3, #4
 8000860:	f003 0201 	and.w	r2, r3, #1
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	4313      	orrs	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	f003 0303 	and.w	r3, r3, #3
 800087e:	2b03      	cmp	r3, #3
 8000880:	d017      	beq.n	80008b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	2203      	movs	r2, #3
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43db      	mvns	r3, r3
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	4013      	ands	r3, r2
 8000898:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	689a      	ldr	r2, [r3, #8]
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f003 0303 	and.w	r3, r3, #3
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d123      	bne.n	8000906 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	08da      	lsrs	r2, r3, #3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3208      	adds	r2, #8
 80008c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	220f      	movs	r2, #15
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	4013      	ands	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	691a      	ldr	r2, [r3, #16]
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	f003 0307 	and.w	r3, r3, #7
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	08da      	lsrs	r2, r3, #3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3208      	adds	r2, #8
 8000900:	6939      	ldr	r1, [r7, #16]
 8000902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	2203      	movs	r2, #3
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	4013      	ands	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f003 0203 	and.w	r2, r3, #3
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4313      	orrs	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000942:	2b00      	cmp	r3, #0
 8000944:	f000 8094 	beq.w	8000a70 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000948:	4b52      	ldr	r3, [pc, #328]	; (8000a94 <HAL_GPIO_Init+0x2c0>)
 800094a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094c:	4a51      	ldr	r2, [pc, #324]	; (8000a94 <HAL_GPIO_Init+0x2c0>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6613      	str	r3, [r2, #96]	; 0x60
 8000954:	4b4f      	ldr	r3, [pc, #316]	; (8000a94 <HAL_GPIO_Init+0x2c0>)
 8000956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000960:	4a4d      	ldr	r2, [pc, #308]	; (8000a98 <HAL_GPIO_Init+0x2c4>)
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	089b      	lsrs	r3, r3, #2
 8000966:	3302      	adds	r3, #2
 8000968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	220f      	movs	r2, #15
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	4013      	ands	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800098a:	d00d      	beq.n	80009a8 <HAL_GPIO_Init+0x1d4>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a43      	ldr	r2, [pc, #268]	; (8000a9c <HAL_GPIO_Init+0x2c8>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d007      	beq.n	80009a4 <HAL_GPIO_Init+0x1d0>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a42      	ldr	r2, [pc, #264]	; (8000aa0 <HAL_GPIO_Init+0x2cc>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d101      	bne.n	80009a0 <HAL_GPIO_Init+0x1cc>
 800099c:	2302      	movs	r3, #2
 800099e:	e004      	b.n	80009aa <HAL_GPIO_Init+0x1d6>
 80009a0:	2307      	movs	r3, #7
 80009a2:	e002      	b.n	80009aa <HAL_GPIO_Init+0x1d6>
 80009a4:	2301      	movs	r3, #1
 80009a6:	e000      	b.n	80009aa <HAL_GPIO_Init+0x1d6>
 80009a8:	2300      	movs	r3, #0
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	f002 0203 	and.w	r2, r2, #3
 80009b0:	0092      	lsls	r2, r2, #2
 80009b2:	4093      	lsls	r3, r2
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009ba:	4937      	ldr	r1, [pc, #220]	; (8000a98 <HAL_GPIO_Init+0x2c4>)
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	089b      	lsrs	r3, r3, #2
 80009c0:	3302      	adds	r3, #2
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009c8:	4b36      	ldr	r3, [pc, #216]	; (8000aa4 <HAL_GPIO_Init+0x2d0>)
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	43db      	mvns	r3, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d003      	beq.n	80009ec <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009ec:	4a2d      	ldr	r2, [pc, #180]	; (8000aa4 <HAL_GPIO_Init+0x2d0>)
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80009f2:	4b2c      	ldr	r3, [pc, #176]	; (8000aa4 <HAL_GPIO_Init+0x2d0>)
 80009f4:	68db      	ldr	r3, [r3, #12]
 80009f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	43db      	mvns	r3, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d003      	beq.n	8000a16 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a16:	4a23      	ldr	r2, [pc, #140]	; (8000aa4 <HAL_GPIO_Init+0x2d0>)
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a1c:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <HAL_GPIO_Init+0x2d0>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	43db      	mvns	r3, r3
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d003      	beq.n	8000a40 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a40:	4a18      	ldr	r2, [pc, #96]	; (8000aa4 <HAL_GPIO_Init+0x2d0>)
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_GPIO_Init+0x2d0>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d003      	beq.n	8000a6a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <HAL_GPIO_Init+0x2d0>)
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	3301      	adds	r3, #1
 8000a74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	f47f aeaf 	bne.w	80007e4 <HAL_GPIO_Init+0x10>
  }
}
 8000a86:	bf00      	nop
 8000a88:	bf00      	nop
 8000a8a:	371c      	adds	r7, #28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40010000 	.word	0x40010000
 8000a9c:	48000400 	.word	0x48000400
 8000aa0:	48000800 	.word	0x48000800
 8000aa4:	40010400 	.word	0x40010400

08000aa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	691a      	ldr	r2, [r3, #16]
 8000ab8:	887b      	ldrh	r3, [r7, #2]
 8000aba:	4013      	ands	r3, r2
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d002      	beq.n	8000ac6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
 8000ac4:	e001      	b.n	8000aca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	807b      	strh	r3, [r7, #2]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ae8:	787b      	ldrb	r3, [r7, #1]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d003      	beq.n	8000af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000aee:	887a      	ldrh	r2, [r7, #2]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000af4:	e002      	b.n	8000afc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000af6:	887a      	ldrh	r2, [r7, #2]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b14:	695a      	ldr	r2, [r3, #20]
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d006      	beq.n	8000b2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f002 fdb6 	bl	8003698 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40010400 	.word	0x40010400

08000b38 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40007000 	.word	0x40007000

08000b58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40007000 	.word	0x40007000

08000b74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b82:	d130      	bne.n	8000be6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b84:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b90:	d038      	beq.n	8000c04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b9a:	4a1e      	ldr	r2, [pc, #120]	; (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ba0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2232      	movs	r2, #50	; 0x32
 8000ba8:	fb02 f303 	mul.w	r3, r2, r3
 8000bac:	4a1b      	ldr	r2, [pc, #108]	; (8000c1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bae:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb2:	0c9b      	lsrs	r3, r3, #18
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bb8:	e002      	b.n	8000bc0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bcc:	d102      	bne.n	8000bd4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1f2      	bne.n	8000bba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000be0:	d110      	bne.n	8000c04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000be2:	2303      	movs	r3, #3
 8000be4:	e00f      	b.n	8000c06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bf2:	d007      	beq.n	8000c04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bfc:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40007000 	.word	0x40007000
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	431bde83 	.word	0x431bde83

08000c20 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f000 bc02 	b.w	8001438 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c34:	4b96      	ldr	r3, [pc, #600]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	f003 030c 	and.w	r3, r3, #12
 8000c3c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c3e:	4b94      	ldr	r3, [pc, #592]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f000 80e4 	beq.w	8000e1e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d007      	beq.n	8000c6c <HAL_RCC_OscConfig+0x4c>
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	2b0c      	cmp	r3, #12
 8000c60:	f040 808b 	bne.w	8000d7a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	f040 8087 	bne.w	8000d7a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c6c:	4b88      	ldr	r3, [pc, #544]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d005      	beq.n	8000c84 <HAL_RCC_OscConfig+0x64>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e3d9      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a1a      	ldr	r2, [r3, #32]
 8000c88:	4b81      	ldr	r3, [pc, #516]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0308 	and.w	r3, r3, #8
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d004      	beq.n	8000c9e <HAL_RCC_OscConfig+0x7e>
 8000c94:	4b7e      	ldr	r3, [pc, #504]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c9c:	e005      	b.n	8000caa <HAL_RCC_OscConfig+0x8a>
 8000c9e:	4b7c      	ldr	r3, [pc, #496]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ca4:	091b      	lsrs	r3, r3, #4
 8000ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d223      	bcs.n	8000cf6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a1b      	ldr	r3, [r3, #32]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fd8c 	bl	80017d0 <RCC_SetFlashLatencyFromMSIRange>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e3ba      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cc2:	4b73      	ldr	r3, [pc, #460]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a72      	ldr	r2, [pc, #456]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	4b70      	ldr	r3, [pc, #448]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6a1b      	ldr	r3, [r3, #32]
 8000cda:	496d      	ldr	r1, [pc, #436]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ce0:	4b6b      	ldr	r3, [pc, #428]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	021b      	lsls	r3, r3, #8
 8000cee:	4968      	ldr	r1, [pc, #416]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	604b      	str	r3, [r1, #4]
 8000cf4:	e025      	b.n	8000d42 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cf6:	4b66      	ldr	r3, [pc, #408]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a65      	ldr	r2, [pc, #404]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	4b63      	ldr	r3, [pc, #396]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a1b      	ldr	r3, [r3, #32]
 8000d0e:	4960      	ldr	r1, [pc, #384]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d10:	4313      	orrs	r3, r2
 8000d12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d14:	4b5e      	ldr	r3, [pc, #376]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69db      	ldr	r3, [r3, #28]
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	495b      	ldr	r1, [pc, #364]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d24:	4313      	orrs	r3, r2
 8000d26:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d109      	bne.n	8000d42 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a1b      	ldr	r3, [r3, #32]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 fd4c 	bl	80017d0 <RCC_SetFlashLatencyFromMSIRange>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e37a      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d42:	f000 fc81 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8000d46:	4602      	mov	r2, r0
 8000d48:	4b51      	ldr	r3, [pc, #324]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	091b      	lsrs	r3, r3, #4
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	4950      	ldr	r1, [pc, #320]	; (8000e94 <HAL_RCC_OscConfig+0x274>)
 8000d54:	5ccb      	ldrb	r3, [r1, r3]
 8000d56:	f003 031f 	and.w	r3, r3, #31
 8000d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5e:	4a4e      	ldr	r2, [pc, #312]	; (8000e98 <HAL_RCC_OscConfig+0x278>)
 8000d60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d62:	4b4e      	ldr	r3, [pc, #312]	; (8000e9c <HAL_RCC_OscConfig+0x27c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fbc6 	bl	80004f8 <HAL_InitTick>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d052      	beq.n	8000e1c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	e35e      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d032      	beq.n	8000de8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d82:	4b43      	ldr	r3, [pc, #268]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a42      	ldr	r2, [pc, #264]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d8e:	f7ff fc03 	bl	8000598 <HAL_GetTick>
 8000d92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d94:	e008      	b.n	8000da8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d96:	f7ff fbff 	bl	8000598 <HAL_GetTick>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d901      	bls.n	8000da8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e347      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000da8:	4b39      	ldr	r3, [pc, #228]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0f0      	beq.n	8000d96 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000db4:	4b36      	ldr	r3, [pc, #216]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a35      	ldr	r2, [pc, #212]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000dba:	f043 0308 	orr.w	r3, r3, #8
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	4b33      	ldr	r3, [pc, #204]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	4930      	ldr	r1, [pc, #192]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dd2:	4b2f      	ldr	r3, [pc, #188]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	492b      	ldr	r1, [pc, #172]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	604b      	str	r3, [r1, #4]
 8000de6:	e01a      	b.n	8000e1e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000de8:	4b29      	ldr	r3, [pc, #164]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a28      	ldr	r2, [pc, #160]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000dee:	f023 0301 	bic.w	r3, r3, #1
 8000df2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000df4:	f7ff fbd0 	bl	8000598 <HAL_GetTick>
 8000df8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dfc:	f7ff fbcc 	bl	8000598 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e314      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1f0      	bne.n	8000dfc <HAL_RCC_OscConfig+0x1dc>
 8000e1a:	e000      	b.n	8000e1e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d073      	beq.n	8000f12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	2b08      	cmp	r3, #8
 8000e2e:	d005      	beq.n	8000e3c <HAL_RCC_OscConfig+0x21c>
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	2b0c      	cmp	r3, #12
 8000e34:	d10e      	bne.n	8000e54 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d10b      	bne.n	8000e54 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d063      	beq.n	8000f10 <HAL_RCC_OscConfig+0x2f0>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d15f      	bne.n	8000f10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e2f1      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e5c:	d106      	bne.n	8000e6c <HAL_RCC_OscConfig+0x24c>
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	e025      	b.n	8000eb8 <HAL_RCC_OscConfig+0x298>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e74:	d114      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x280>
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a02      	ldr	r2, [pc, #8]	; (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e013      	b.n	8000eb8 <HAL_RCC_OscConfig+0x298>
 8000e90:	40021000 	.word	0x40021000
 8000e94:	080040c0 	.word	0x080040c0
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	4ba0      	ldr	r3, [pc, #640]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a9f      	ldr	r2, [pc, #636]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8000ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	4b9d      	ldr	r3, [pc, #628]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a9c      	ldr	r2, [pc, #624]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8000eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d013      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fb6a 	bl	8000598 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec8:	f7ff fb66 	bl	8000598 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	; 0x64
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e2ae      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eda:	4b92      	ldr	r3, [pc, #584]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f0      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x2a8>
 8000ee6:	e014      	b.n	8000f12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fb56 	bl	8000598 <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef0:	f7ff fb52 	bl	8000598 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b64      	cmp	r3, #100	; 0x64
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e29a      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f02:	4b88      	ldr	r3, [pc, #544]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f0      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x2d0>
 8000f0e:	e000      	b.n	8000f12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d060      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d005      	beq.n	8000f30 <HAL_RCC_OscConfig+0x310>
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	2b0c      	cmp	r3, #12
 8000f28:	d119      	bne.n	8000f5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d116      	bne.n	8000f5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f30:	4b7c      	ldr	r3, [pc, #496]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d005      	beq.n	8000f48 <HAL_RCC_OscConfig+0x328>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e277      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f48:	4b76      	ldr	r3, [pc, #472]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	061b      	lsls	r3, r3, #24
 8000f56:	4973      	ldr	r1, [pc, #460]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f5c:	e040      	b.n	8000fe0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d023      	beq.n	8000fae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f66:	4b6f      	ldr	r3, [pc, #444]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a6e      	ldr	r2, [pc, #440]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f72:	f7ff fb11 	bl	8000598 <HAL_GetTick>
 8000f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f78:	e008      	b.n	8000f8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f7a:	f7ff fb0d 	bl	8000598 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e255      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f8c:	4b65      	ldr	r3, [pc, #404]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0f0      	beq.n	8000f7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f98:	4b62      	ldr	r3, [pc, #392]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	061b      	lsls	r3, r3, #24
 8000fa6:	495f      	ldr	r1, [pc, #380]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]
 8000fac:	e018      	b.n	8000fe0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fae:	4b5d      	ldr	r3, [pc, #372]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a5c      	ldr	r2, [pc, #368]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8000fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fba:	f7ff faed 	bl	8000598 <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc2:	f7ff fae9 	bl	8000598 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e231      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fd4:	4b53      	ldr	r3, [pc, #332]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f0      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d03c      	beq.n	8001066 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d01c      	beq.n	800102e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ff4:	4b4b      	ldr	r3, [pc, #300]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8000ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ffa:	4a4a      	ldr	r2, [pc, #296]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001004:	f7ff fac8 	bl	8000598 <HAL_GetTick>
 8001008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800100c:	f7ff fac4 	bl	8000598 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e20c      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800101e:	4b41      	ldr	r3, [pc, #260]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8001020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0ef      	beq.n	800100c <HAL_RCC_OscConfig+0x3ec>
 800102c:	e01b      	b.n	8001066 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800102e:	4b3d      	ldr	r3, [pc, #244]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8001030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001034:	4a3b      	ldr	r2, [pc, #236]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8001036:	f023 0301 	bic.w	r3, r3, #1
 800103a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800103e:	f7ff faab 	bl	8000598 <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001046:	f7ff faa7 	bl	8000598 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e1ef      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001058:	4b32      	ldr	r3, [pc, #200]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 800105a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1ef      	bne.n	8001046 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 80a6 	beq.w	80011c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001078:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10d      	bne.n	80010a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001084:	4b27      	ldr	r3, [pc, #156]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001088:	4a26      	ldr	r2, [pc, #152]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108e:	6593      	str	r3, [r2, #88]	; 0x58
 8001090:	4b24      	ldr	r3, [pc, #144]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8001092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800109c:	2301      	movs	r3, #1
 800109e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010a0:	4b21      	ldr	r3, [pc, #132]	; (8001128 <HAL_RCC_OscConfig+0x508>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d118      	bne.n	80010de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010ac:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <HAL_RCC_OscConfig+0x508>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a1d      	ldr	r2, [pc, #116]	; (8001128 <HAL_RCC_OscConfig+0x508>)
 80010b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010b8:	f7ff fa6e 	bl	8000598 <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c0:	f7ff fa6a 	bl	8000598 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e1b2      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_RCC_OscConfig+0x508>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0f0      	beq.n	80010c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d108      	bne.n	80010f8 <HAL_RCC_OscConfig+0x4d8>
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 80010e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010f6:	e029      	b.n	800114c <HAL_RCC_OscConfig+0x52c>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	2b05      	cmp	r3, #5
 80010fe:	d115      	bne.n	800112c <HAL_RCC_OscConfig+0x50c>
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8001102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001106:	4a07      	ldr	r2, [pc, #28]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8001112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001116:	4a03      	ldr	r2, [pc, #12]	; (8001124 <HAL_RCC_OscConfig+0x504>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001120:	e014      	b.n	800114c <HAL_RCC_OscConfig+0x52c>
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000
 8001128:	40007000 	.word	0x40007000
 800112c:	4b9a      	ldr	r3, [pc, #616]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 800112e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001132:	4a99      	ldr	r2, [pc, #612]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 8001134:	f023 0301 	bic.w	r3, r3, #1
 8001138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800113c:	4b96      	ldr	r3, [pc, #600]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 800113e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001142:	4a95      	ldr	r2, [pc, #596]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 8001144:	f023 0304 	bic.w	r3, r3, #4
 8001148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d016      	beq.n	8001182 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001154:	f7ff fa20 	bl	8000598 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800115a:	e00a      	b.n	8001172 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800115c:	f7ff fa1c 	bl	8000598 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	f241 3288 	movw	r2, #5000	; 0x1388
 800116a:	4293      	cmp	r3, r2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e162      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001172:	4b89      	ldr	r3, [pc, #548]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 8001174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0ed      	beq.n	800115c <HAL_RCC_OscConfig+0x53c>
 8001180:	e015      	b.n	80011ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001182:	f7ff fa09 	bl	8000598 <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001188:	e00a      	b.n	80011a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118a:	f7ff fa05 	bl	8000598 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	f241 3288 	movw	r2, #5000	; 0x1388
 8001198:	4293      	cmp	r3, r2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e14b      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011a0:	4b7d      	ldr	r3, [pc, #500]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 80011a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1ed      	bne.n	800118a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d105      	bne.n	80011c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b4:	4b78      	ldr	r3, [pc, #480]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 80011b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b8:	4a77      	ldr	r2, [pc, #476]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 80011ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0320 	and.w	r3, r3, #32
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d03c      	beq.n	8001246 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d01c      	beq.n	800120e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011d4:	4b70      	ldr	r3, [pc, #448]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 80011d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011da:	4a6f      	ldr	r2, [pc, #444]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e4:	f7ff f9d8 	bl	8000598 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011ec:	f7ff f9d4 	bl	8000598 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e11c      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011fe:	4b66      	ldr	r3, [pc, #408]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 8001200:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0ef      	beq.n	80011ec <HAL_RCC_OscConfig+0x5cc>
 800120c:	e01b      	b.n	8001246 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800120e:	4b62      	ldr	r3, [pc, #392]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 8001210:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001214:	4a60      	ldr	r2, [pc, #384]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 8001216:	f023 0301 	bic.w	r3, r3, #1
 800121a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121e:	f7ff f9bb 	bl	8000598 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001226:	f7ff f9b7 	bl	8000598 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e0ff      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001238:	4b57      	ldr	r3, [pc, #348]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 800123a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1ef      	bne.n	8001226 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 80f3 	beq.w	8001436 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001254:	2b02      	cmp	r3, #2
 8001256:	f040 80c9 	bne.w	80013ec <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800125a:	4b4f      	ldr	r3, [pc, #316]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f003 0203 	and.w	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126a:	429a      	cmp	r2, r3
 800126c:	d12c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	3b01      	subs	r3, #1
 800127a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800127c:	429a      	cmp	r2, r3
 800127e:	d123      	bne.n	80012c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800128a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800128c:	429a      	cmp	r2, r3
 800128e:	d11b      	bne.n	80012c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800129c:	429a      	cmp	r2, r3
 800129e:	d113      	bne.n	80012c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012aa:	085b      	lsrs	r3, r3, #1
 80012ac:	3b01      	subs	r3, #1
 80012ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d109      	bne.n	80012c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	085b      	lsrs	r3, r3, #1
 80012c0:	3b01      	subs	r3, #1
 80012c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d06b      	beq.n	80013a0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	2b0c      	cmp	r3, #12
 80012cc:	d062      	beq.n	8001394 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012ce:	4b32      	ldr	r3, [pc, #200]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e0ac      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80012de:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a2d      	ldr	r2, [pc, #180]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 80012e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012ea:	f7ff f955 	bl	8000598 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f2:	f7ff f951 	bl	8000598 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e099      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001304:	4b24      	ldr	r3, [pc, #144]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f0      	bne.n	80012f2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001310:	4b21      	ldr	r3, [pc, #132]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <HAL_RCC_OscConfig+0x77c>)
 8001316:	4013      	ands	r3, r2
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001320:	3a01      	subs	r2, #1
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	4311      	orrs	r1, r2
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800132a:	0212      	lsls	r2, r2, #8
 800132c:	4311      	orrs	r1, r2
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001332:	0852      	lsrs	r2, r2, #1
 8001334:	3a01      	subs	r2, #1
 8001336:	0552      	lsls	r2, r2, #21
 8001338:	4311      	orrs	r1, r2
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800133e:	0852      	lsrs	r2, r2, #1
 8001340:	3a01      	subs	r2, #1
 8001342:	0652      	lsls	r2, r2, #25
 8001344:	4311      	orrs	r1, r2
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800134a:	06d2      	lsls	r2, r2, #27
 800134c:	430a      	orrs	r2, r1
 800134e:	4912      	ldr	r1, [pc, #72]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 8001350:	4313      	orrs	r3, r2
 8001352:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 800135a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800135e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	4a0c      	ldr	r2, [pc, #48]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 8001366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800136a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800136c:	f7ff f914 	bl	8000598 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001374:	f7ff f910 	bl	8000598 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e058      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <HAL_RCC_OscConfig+0x778>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f0      	beq.n	8001374 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001392:	e050      	b.n	8001436 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e04f      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
 8001398:	40021000 	.word	0x40021000
 800139c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013a0:	4b27      	ldr	r3, [pc, #156]	; (8001440 <HAL_RCC_OscConfig+0x820>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d144      	bne.n	8001436 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013ac:	4b24      	ldr	r3, [pc, #144]	; (8001440 <HAL_RCC_OscConfig+0x820>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a23      	ldr	r2, [pc, #140]	; (8001440 <HAL_RCC_OscConfig+0x820>)
 80013b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013b8:	4b21      	ldr	r3, [pc, #132]	; (8001440 <HAL_RCC_OscConfig+0x820>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4a20      	ldr	r2, [pc, #128]	; (8001440 <HAL_RCC_OscConfig+0x820>)
 80013be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013c4:	f7ff f8e8 	bl	8000598 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013cc:	f7ff f8e4 	bl	8000598 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e02c      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_RCC_OscConfig+0x820>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0x7ac>
 80013ea:	e024      	b.n	8001436 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2b0c      	cmp	r3, #12
 80013f0:	d01f      	beq.n	8001432 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <HAL_RCC_OscConfig+0x820>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <HAL_RCC_OscConfig+0x820>)
 80013f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fe:	f7ff f8cb 	bl	8000598 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001406:	f7ff f8c7 	bl	8000598 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e00f      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_RCC_OscConfig+0x820>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f0      	bne.n	8001406 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_RCC_OscConfig+0x820>)
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	4905      	ldr	r1, [pc, #20]	; (8001440 <HAL_RCC_OscConfig+0x820>)
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_RCC_OscConfig+0x824>)
 800142c:	4013      	ands	r3, r2
 800142e:	60cb      	str	r3, [r1, #12]
 8001430:	e001      	b.n	8001436 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3720      	adds	r7, #32
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40021000 	.word	0x40021000
 8001444:	feeefffc 	.word	0xfeeefffc

08001448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0e7      	b.n	800162c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800145c:	4b75      	ldr	r3, [pc, #468]	; (8001634 <HAL_RCC_ClockConfig+0x1ec>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d910      	bls.n	800148c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146a:	4b72      	ldr	r3, [pc, #456]	; (8001634 <HAL_RCC_ClockConfig+0x1ec>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 0207 	bic.w	r2, r3, #7
 8001472:	4970      	ldr	r1, [pc, #448]	; (8001634 <HAL_RCC_ClockConfig+0x1ec>)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	4313      	orrs	r3, r2
 8001478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800147a:	4b6e      	ldr	r3, [pc, #440]	; (8001634 <HAL_RCC_ClockConfig+0x1ec>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d001      	beq.n	800148c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0cf      	b.n	800162c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d010      	beq.n	80014ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	4b66      	ldr	r3, [pc, #408]	; (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d908      	bls.n	80014ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a8:	4b63      	ldr	r3, [pc, #396]	; (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	4960      	ldr	r1, [pc, #384]	; (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d04c      	beq.n	8001560 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d107      	bne.n	80014de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ce:	4b5a      	ldr	r3, [pc, #360]	; (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d121      	bne.n	800151e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e0a6      	b.n	800162c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d107      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e6:	4b54      	ldr	r3, [pc, #336]	; (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d115      	bne.n	800151e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e09a      	b.n	800162c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d107      	bne.n	800150e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014fe:	4b4e      	ldr	r3, [pc, #312]	; (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d109      	bne.n	800151e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e08e      	b.n	800162c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800150e:	4b4a      	ldr	r3, [pc, #296]	; (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e086      	b.n	800162c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800151e:	4b46      	ldr	r3, [pc, #280]	; (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f023 0203 	bic.w	r2, r3, #3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4943      	ldr	r1, [pc, #268]	; (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 800152c:	4313      	orrs	r3, r2
 800152e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001530:	f7ff f832 	bl	8000598 <HAL_GetTick>
 8001534:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001536:	e00a      	b.n	800154e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001538:	f7ff f82e 	bl	8000598 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f241 3288 	movw	r2, #5000	; 0x1388
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e06e      	b.n	800162c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154e:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 020c 	and.w	r2, r3, #12
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	429a      	cmp	r2, r3
 800155e:	d1eb      	bne.n	8001538 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d010      	beq.n	800158e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	4b31      	ldr	r3, [pc, #196]	; (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001578:	429a      	cmp	r2, r3
 800157a:	d208      	bcs.n	800158e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800157c:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	492b      	ldr	r1, [pc, #172]	; (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 800158a:	4313      	orrs	r3, r2
 800158c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800158e:	4b29      	ldr	r3, [pc, #164]	; (8001634 <HAL_RCC_ClockConfig+0x1ec>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d210      	bcs.n	80015be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159c:	4b25      	ldr	r3, [pc, #148]	; (8001634 <HAL_RCC_ClockConfig+0x1ec>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f023 0207 	bic.w	r2, r3, #7
 80015a4:	4923      	ldr	r1, [pc, #140]	; (8001634 <HAL_RCC_ClockConfig+0x1ec>)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_RCC_ClockConfig+0x1ec>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d001      	beq.n	80015be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e036      	b.n	800162c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d008      	beq.n	80015dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ca:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	4918      	ldr	r1, [pc, #96]	; (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d009      	beq.n	80015fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4910      	ldr	r1, [pc, #64]	; (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015fc:	f000 f824 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 8001600:	4602      	mov	r2, r0
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HAL_RCC_ClockConfig+0x1f0>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	f003 030f 	and.w	r3, r3, #15
 800160c:	490b      	ldr	r1, [pc, #44]	; (800163c <HAL_RCC_ClockConfig+0x1f4>)
 800160e:	5ccb      	ldrb	r3, [r1, r3]
 8001610:	f003 031f 	and.w	r3, r3, #31
 8001614:	fa22 f303 	lsr.w	r3, r2, r3
 8001618:	4a09      	ldr	r2, [pc, #36]	; (8001640 <HAL_RCC_ClockConfig+0x1f8>)
 800161a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_RCC_ClockConfig+0x1fc>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff69 	bl	80004f8 <HAL_InitTick>
 8001626:	4603      	mov	r3, r0
 8001628:	72fb      	strb	r3, [r7, #11]

  return status;
 800162a:	7afb      	ldrb	r3, [r7, #11]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40022000 	.word	0x40022000
 8001638:	40021000 	.word	0x40021000
 800163c:	080040c0 	.word	0x080040c0
 8001640:	20000008 	.word	0x20000008
 8001644:	20000000 	.word	0x20000000

08001648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001656:	4b3e      	ldr	r3, [pc, #248]	; (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001660:	4b3b      	ldr	r3, [pc, #236]	; (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0x34>
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	2b0c      	cmp	r3, #12
 8001674:	d121      	bne.n	80016ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d11e      	bne.n	80016ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800167c:	4b34      	ldr	r3, [pc, #208]	; (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0308 	and.w	r3, r3, #8
 8001684:	2b00      	cmp	r3, #0
 8001686:	d107      	bne.n	8001698 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001688:	4b31      	ldr	r3, [pc, #196]	; (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 800168a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800168e:	0a1b      	lsrs	r3, r3, #8
 8001690:	f003 030f 	and.w	r3, r3, #15
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	e005      	b.n	80016a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001698:	4b2d      	ldr	r3, [pc, #180]	; (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016a4:	4a2b      	ldr	r2, [pc, #172]	; (8001754 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10d      	bne.n	80016d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b8:	e00a      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d102      	bne.n	80016c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <HAL_RCC_GetSysClockFreq+0x110>)
 80016c2:	61bb      	str	r3, [r7, #24]
 80016c4:	e004      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016cc:	4b23      	ldr	r3, [pc, #140]	; (800175c <HAL_RCC_GetSysClockFreq+0x114>)
 80016ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	2b0c      	cmp	r3, #12
 80016d4:	d134      	bne.n	8001740 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d003      	beq.n	80016ee <HAL_RCC_GetSysClockFreq+0xa6>
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d003      	beq.n	80016f4 <HAL_RCC_GetSysClockFreq+0xac>
 80016ec:	e005      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <HAL_RCC_GetSysClockFreq+0x110>)
 80016f0:	617b      	str	r3, [r7, #20]
      break;
 80016f2:	e005      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_RCC_GetSysClockFreq+0x114>)
 80016f6:	617b      	str	r3, [r7, #20]
      break;
 80016f8:	e002      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	617b      	str	r3, [r7, #20]
      break;
 80016fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	3301      	adds	r3, #1
 800170c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	0a1b      	lsrs	r3, r3, #8
 8001714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	fb03 f202 	mul.w	r2, r3, r2
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	fbb2 f3f3 	udiv	r3, r2, r3
 8001724:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_RCC_GetSysClockFreq+0x108>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	0e5b      	lsrs	r3, r3, #25
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	3301      	adds	r3, #1
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	fbb2 f3f3 	udiv	r3, r2, r3
 800173e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001740:	69bb      	ldr	r3, [r7, #24]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
 8001754:	080040d8 	.word	0x080040d8
 8001758:	00f42400 	.word	0x00f42400
 800175c:	007a1200 	.word	0x007a1200

08001760 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <HAL_RCC_GetHCLKFreq+0x14>)
 8001766:	681b      	ldr	r3, [r3, #0]
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000008 	.word	0x20000008

08001778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800177c:	f7ff fff0 	bl	8001760 <HAL_RCC_GetHCLKFreq>
 8001780:	4602      	mov	r2, r0
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	0a1b      	lsrs	r3, r3, #8
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	4904      	ldr	r1, [pc, #16]	; (80017a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800178e:	5ccb      	ldrb	r3, [r1, r3]
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001798:	4618      	mov	r0, r3
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40021000 	.word	0x40021000
 80017a0:	080040d0 	.word	0x080040d0

080017a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80017a8:	f7ff ffda 	bl	8001760 <HAL_RCC_GetHCLKFreq>
 80017ac:	4602      	mov	r2, r0
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	0adb      	lsrs	r3, r3, #11
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	4904      	ldr	r1, [pc, #16]	; (80017cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80017ba:	5ccb      	ldrb	r3, [r1, r3]
 80017bc:	f003 031f 	and.w	r3, r3, #31
 80017c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	080040d0 	.word	0x080040d0

080017d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017dc:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017e8:	f7ff f9b6 	bl	8000b58 <HAL_PWREx_GetVoltageRange>
 80017ec:	6178      	str	r0, [r7, #20]
 80017ee:	e014      	b.n	800181a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017f0:	4b25      	ldr	r3, [pc, #148]	; (8001888 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f4:	4a24      	ldr	r2, [pc, #144]	; (8001888 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fa:	6593      	str	r3, [r2, #88]	; 0x58
 80017fc:	4b22      	ldr	r3, [pc, #136]	; (8001888 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001808:	f7ff f9a6 	bl	8000b58 <HAL_PWREx_GetVoltageRange>
 800180c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800180e:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	4a1d      	ldr	r2, [pc, #116]	; (8001888 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001818:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001820:	d10b      	bne.n	800183a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b80      	cmp	r3, #128	; 0x80
 8001826:	d919      	bls.n	800185c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2ba0      	cmp	r3, #160	; 0xa0
 800182c:	d902      	bls.n	8001834 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800182e:	2302      	movs	r3, #2
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	e013      	b.n	800185c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001834:	2301      	movs	r3, #1
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	e010      	b.n	800185c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b80      	cmp	r3, #128	; 0x80
 800183e:	d902      	bls.n	8001846 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001840:	2303      	movs	r3, #3
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	e00a      	b.n	800185c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b80      	cmp	r3, #128	; 0x80
 800184a:	d102      	bne.n	8001852 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800184c:	2302      	movs	r3, #2
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	e004      	b.n	800185c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b70      	cmp	r3, #112	; 0x70
 8001856:	d101      	bne.n	800185c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001858:	2301      	movs	r3, #1
 800185a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 0207 	bic.w	r2, r3, #7
 8001864:	4909      	ldr	r1, [pc, #36]	; (800188c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800186c:	4b07      	ldr	r3, [pc, #28]	; (800188c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	429a      	cmp	r2, r3
 8001878:	d001      	beq.n	800187e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021000 	.word	0x40021000
 800188c:	40022000 	.word	0x40022000

08001890 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001898:	2300      	movs	r3, #0
 800189a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800189c:	2300      	movs	r3, #0
 800189e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d031      	beq.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80018b4:	d01a      	beq.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80018b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80018ba:	d814      	bhi.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d009      	beq.n	80018d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80018c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80018c4:	d10f      	bne.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80018c6:	4b5d      	ldr	r3, [pc, #372]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	4a5c      	ldr	r2, [pc, #368]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80018cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80018d2:	e00c      	b.n	80018ee <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3304      	adds	r3, #4
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f9de 	bl	8001c9c <RCCEx_PLLSAI1_Config>
 80018e0:	4603      	mov	r3, r0
 80018e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80018e4:	e003      	b.n	80018ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	74fb      	strb	r3, [r7, #19]
      break;
 80018ea:	e000      	b.n	80018ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80018ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80018ee:	7cfb      	ldrb	r3, [r7, #19]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10b      	bne.n	800190c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80018f4:	4b51      	ldr	r3, [pc, #324]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80018f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001902:	494e      	ldr	r1, [pc, #312]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001904:	4313      	orrs	r3, r2
 8001906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800190a:	e001      	b.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800190c:	7cfb      	ldrb	r3, [r7, #19]
 800190e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 809e 	beq.w	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001922:	4b46      	ldr	r3, [pc, #280]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001932:	2300      	movs	r3, #0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00d      	beq.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001938:	4b40      	ldr	r3, [pc, #256]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	4a3f      	ldr	r2, [pc, #252]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800193e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001942:	6593      	str	r3, [r2, #88]	; 0x58
 8001944:	4b3d      	ldr	r3, [pc, #244]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001950:	2301      	movs	r3, #1
 8001952:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001954:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a39      	ldr	r2, [pc, #228]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800195a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001960:	f7fe fe1a 	bl	8000598 <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001966:	e009      	b.n	800197c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001968:	f7fe fe16 	bl	8000598 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d902      	bls.n	800197c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	74fb      	strb	r3, [r7, #19]
        break;
 800197a:	e005      	b.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800197c:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0ef      	beq.n	8001968 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001988:	7cfb      	ldrb	r3, [r7, #19]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d15a      	bne.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800198e:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001998:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d01e      	beq.n	80019de <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d019      	beq.n	80019de <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80019aa:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80019b6:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019bc:	4a1f      	ldr	r2, [pc, #124]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80019c6:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019cc:	4a1b      	ldr	r2, [pc, #108]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80019d6:	4a19      	ldr	r2, [pc, #100]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d016      	beq.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7fe fdd6 	bl	8000598 <HAL_GetTick>
 80019ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ee:	e00b      	b.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f0:	f7fe fdd2 	bl	8000598 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d902      	bls.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	74fb      	strb	r3, [r7, #19]
            break;
 8001a06:	e006      	b.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0ec      	beq.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001a16:	7cfb      	ldrb	r3, [r7, #19]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10b      	bne.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a2a:	4904      	ldr	r1, [pc, #16]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001a32:	e009      	b.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001a34:	7cfb      	ldrb	r3, [r7, #19]
 8001a36:	74bb      	strb	r3, [r7, #18]
 8001a38:	e006      	b.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a44:	7cfb      	ldrb	r3, [r7, #19]
 8001a46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a48:	7c7b      	ldrb	r3, [r7, #17]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d105      	bne.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a4e:	4b8a      	ldr	r3, [pc, #552]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a52:	4a89      	ldr	r2, [pc, #548]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00a      	beq.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a66:	4b84      	ldr	r3, [pc, #528]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6c:	f023 0203 	bic.w	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	4980      	ldr	r1, [pc, #512]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00a      	beq.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a88:	4b7b      	ldr	r3, [pc, #492]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8e:	f023 020c 	bic.w	r2, r3, #12
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	4978      	ldr	r1, [pc, #480]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0320 	and.w	r3, r3, #32
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00a      	beq.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001aaa:	4b73      	ldr	r3, [pc, #460]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	496f      	ldr	r1, [pc, #444]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00a      	beq.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001acc:	4b6a      	ldr	r3, [pc, #424]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ada:	4967      	ldr	r1, [pc, #412]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00a      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001aee:	4b62      	ldr	r3, [pc, #392]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afc:	495e      	ldr	r1, [pc, #376]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00a      	beq.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b10:	4b59      	ldr	r3, [pc, #356]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	4956      	ldr	r1, [pc, #344]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00a      	beq.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001b32:	4b51      	ldr	r3, [pc, #324]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	494d      	ldr	r1, [pc, #308]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d028      	beq.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b54:	4b48      	ldr	r3, [pc, #288]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4945      	ldr	r1, [pc, #276]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b72:	d106      	bne.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b74:	4b40      	ldr	r3, [pc, #256]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	4a3f      	ldr	r2, [pc, #252]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001b7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b7e:	60d3      	str	r3, [r2, #12]
 8001b80:	e011      	b.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b8a:	d10c      	bne.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3304      	adds	r3, #4
 8001b90:	2101      	movs	r1, #1
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 f882 	bl	8001c9c <RCCEx_PLLSAI1_Config>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001b9c:	7cfb      	ldrb	r3, [r7, #19]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8001ba2:	7cfb      	ldrb	r3, [r7, #19]
 8001ba4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d028      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001bb2:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc0:	492d      	ldr	r1, [pc, #180]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bd0:	d106      	bne.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001bd2:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	4a28      	ldr	r2, [pc, #160]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bdc:	60d3      	str	r3, [r2, #12]
 8001bde:	e011      	b.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3304      	adds	r3, #4
 8001bee:	2101      	movs	r1, #1
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f000 f853 	bl	8001c9c <RCCEx_PLLSAI1_Config>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001bfa:	7cfb      	ldrb	r3, [r7, #19]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8001c00:	7cfb      	ldrb	r3, [r7, #19]
 8001c02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d01c      	beq.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1e:	4916      	ldr	r1, [pc, #88]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c2e:	d10c      	bne.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3304      	adds	r3, #4
 8001c34:	2102      	movs	r1, #2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f830 	bl	8001c9c <RCCEx_PLLSAI1_Config>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001c40:	7cfb      	ldrb	r3, [r7, #19]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8001c46:	7cfb      	ldrb	r3, [r7, #19]
 8001c48:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00a      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c5c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c64:	4904      	ldr	r1, [pc, #16]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001c6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000

08001c7c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000

08001c9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001caa:	4b74      	ldr	r3, [pc, #464]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d018      	beq.n	8001ce8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001cb6:	4b71      	ldr	r3, [pc, #452]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 0203 	and.w	r2, r3, #3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d10d      	bne.n	8001ce2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
       ||
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d009      	beq.n	8001ce2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001cce:	4b6b      	ldr	r3, [pc, #428]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	091b      	lsrs	r3, r3, #4
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
       ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d047      	beq.n	8001d72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	73fb      	strb	r3, [r7, #15]
 8001ce6:	e044      	b.n	8001d72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d018      	beq.n	8001d22 <RCCEx_PLLSAI1_Config+0x86>
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d825      	bhi.n	8001d40 <RCCEx_PLLSAI1_Config+0xa4>
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d002      	beq.n	8001cfe <RCCEx_PLLSAI1_Config+0x62>
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d009      	beq.n	8001d10 <RCCEx_PLLSAI1_Config+0x74>
 8001cfc:	e020      	b.n	8001d40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001cfe:	4b5f      	ldr	r3, [pc, #380]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d11d      	bne.n	8001d46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d0e:	e01a      	b.n	8001d46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001d10:	4b5a      	ldr	r3, [pc, #360]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d116      	bne.n	8001d4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d20:	e013      	b.n	8001d4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001d22:	4b56      	ldr	r3, [pc, #344]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10f      	bne.n	8001d4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001d2e:	4b53      	ldr	r3, [pc, #332]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d109      	bne.n	8001d4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001d3e:	e006      	b.n	8001d4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
      break;
 8001d44:	e004      	b.n	8001d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001d46:	bf00      	nop
 8001d48:	e002      	b.n	8001d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001d4a:	bf00      	nop
 8001d4c:	e000      	b.n	8001d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001d4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10d      	bne.n	8001d72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001d56:	4b49      	ldr	r3, [pc, #292]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6819      	ldr	r1, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	430b      	orrs	r3, r1
 8001d6c:	4943      	ldr	r1, [pc, #268]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d17c      	bne.n	8001e72 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001d78:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a3f      	ldr	r2, [pc, #252]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001d7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d84:	f7fe fc08 	bl	8000598 <HAL_GetTick>
 8001d88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001d8a:	e009      	b.n	8001da0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001d8c:	f7fe fc04 	bl	8000598 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d902      	bls.n	8001da0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	73fb      	strb	r3, [r7, #15]
        break;
 8001d9e:	e005      	b.n	8001dac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001da0:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1ef      	bne.n	8001d8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d15f      	bne.n	8001e72 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d110      	bne.n	8001dda <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001db8:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001dc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6892      	ldr	r2, [r2, #8]
 8001dc8:	0211      	lsls	r1, r2, #8
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68d2      	ldr	r2, [r2, #12]
 8001dce:	06d2      	lsls	r2, r2, #27
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	492a      	ldr	r1, [pc, #168]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	610b      	str	r3, [r1, #16]
 8001dd8:	e027      	b.n	8001e2a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d112      	bne.n	8001e06 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001de0:	4b26      	ldr	r3, [pc, #152]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001de8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6892      	ldr	r2, [r2, #8]
 8001df0:	0211      	lsls	r1, r2, #8
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6912      	ldr	r2, [r2, #16]
 8001df6:	0852      	lsrs	r2, r2, #1
 8001df8:	3a01      	subs	r2, #1
 8001dfa:	0552      	lsls	r2, r2, #21
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	491f      	ldr	r1, [pc, #124]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	610b      	str	r3, [r1, #16]
 8001e04:	e011      	b.n	8001e2a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e06:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001e0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6892      	ldr	r2, [r2, #8]
 8001e16:	0211      	lsls	r1, r2, #8
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6952      	ldr	r2, [r2, #20]
 8001e1c:	0852      	lsrs	r2, r2, #1
 8001e1e:	3a01      	subs	r2, #1
 8001e20:	0652      	lsls	r2, r2, #25
 8001e22:	430a      	orrs	r2, r1
 8001e24:	4915      	ldr	r1, [pc, #84]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a13      	ldr	r2, [pc, #76]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e34:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e36:	f7fe fbaf 	bl	8000598 <HAL_GetTick>
 8001e3a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001e3c:	e009      	b.n	8001e52 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001e3e:	f7fe fbab 	bl	8000598 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d902      	bls.n	8001e52 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	73fb      	strb	r3, [r7, #15]
          break;
 8001e50:	e005      	b.n	8001e5e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0ef      	beq.n	8001e3e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d106      	bne.n	8001e72 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	4903      	ldr	r1, [pc, #12]	; (8001e7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000

08001e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e049      	b.n	8001f26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d106      	bne.n	8001eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f001 ff62 	bl	8003d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3304      	adds	r3, #4
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	f000 fb52 	bl	8002568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e049      	b.n	8001fd4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d106      	bne.n	8001f5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f841 	bl	8001fdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	f000 fafb 	bl	8002568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d109      	bne.n	8002014 <HAL_TIM_PWM_Start+0x24>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b01      	cmp	r3, #1
 800200a:	bf14      	ite	ne
 800200c:	2301      	movne	r3, #1
 800200e:	2300      	moveq	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	e03c      	b.n	800208e <HAL_TIM_PWM_Start+0x9e>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2b04      	cmp	r3, #4
 8002018:	d109      	bne.n	800202e <HAL_TIM_PWM_Start+0x3e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b01      	cmp	r3, #1
 8002024:	bf14      	ite	ne
 8002026:	2301      	movne	r3, #1
 8002028:	2300      	moveq	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	e02f      	b.n	800208e <HAL_TIM_PWM_Start+0x9e>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b08      	cmp	r3, #8
 8002032:	d109      	bne.n	8002048 <HAL_TIM_PWM_Start+0x58>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b01      	cmp	r3, #1
 800203e:	bf14      	ite	ne
 8002040:	2301      	movne	r3, #1
 8002042:	2300      	moveq	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	e022      	b.n	800208e <HAL_TIM_PWM_Start+0x9e>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2b0c      	cmp	r3, #12
 800204c:	d109      	bne.n	8002062 <HAL_TIM_PWM_Start+0x72>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	bf14      	ite	ne
 800205a:	2301      	movne	r3, #1
 800205c:	2300      	moveq	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	e015      	b.n	800208e <HAL_TIM_PWM_Start+0x9e>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b10      	cmp	r3, #16
 8002066:	d109      	bne.n	800207c <HAL_TIM_PWM_Start+0x8c>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b01      	cmp	r3, #1
 8002072:	bf14      	ite	ne
 8002074:	2301      	movne	r3, #1
 8002076:	2300      	moveq	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	e008      	b.n	800208e <HAL_TIM_PWM_Start+0x9e>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b01      	cmp	r3, #1
 8002086:	bf14      	ite	ne
 8002088:	2301      	movne	r3, #1
 800208a:	2300      	moveq	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e07e      	b.n	8002194 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d104      	bne.n	80020a6 <HAL_TIM_PWM_Start+0xb6>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2202      	movs	r2, #2
 80020a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020a4:	e023      	b.n	80020ee <HAL_TIM_PWM_Start+0xfe>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d104      	bne.n	80020b6 <HAL_TIM_PWM_Start+0xc6>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020b4:	e01b      	b.n	80020ee <HAL_TIM_PWM_Start+0xfe>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d104      	bne.n	80020c6 <HAL_TIM_PWM_Start+0xd6>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020c4:	e013      	b.n	80020ee <HAL_TIM_PWM_Start+0xfe>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b0c      	cmp	r3, #12
 80020ca:	d104      	bne.n	80020d6 <HAL_TIM_PWM_Start+0xe6>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80020d4:	e00b      	b.n	80020ee <HAL_TIM_PWM_Start+0xfe>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	2b10      	cmp	r3, #16
 80020da:	d104      	bne.n	80020e6 <HAL_TIM_PWM_Start+0xf6>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020e4:	e003      	b.n	80020ee <HAL_TIM_PWM_Start+0xfe>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2202      	movs	r2, #2
 80020ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2201      	movs	r2, #1
 80020f4:	6839      	ldr	r1, [r7, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fdb2 	bl	8002c60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a26      	ldr	r2, [pc, #152]	; (800219c <HAL_TIM_PWM_Start+0x1ac>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d009      	beq.n	800211a <HAL_TIM_PWM_Start+0x12a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a25      	ldr	r2, [pc, #148]	; (80021a0 <HAL_TIM_PWM_Start+0x1b0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d004      	beq.n	800211a <HAL_TIM_PWM_Start+0x12a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a23      	ldr	r2, [pc, #140]	; (80021a4 <HAL_TIM_PWM_Start+0x1b4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d101      	bne.n	800211e <HAL_TIM_PWM_Start+0x12e>
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <HAL_TIM_PWM_Start+0x130>
 800211e:	2300      	movs	r3, #0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d007      	beq.n	8002134 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002132:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a18      	ldr	r2, [pc, #96]	; (800219c <HAL_TIM_PWM_Start+0x1ac>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d009      	beq.n	8002152 <HAL_TIM_PWM_Start+0x162>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002146:	d004      	beq.n	8002152 <HAL_TIM_PWM_Start+0x162>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <HAL_TIM_PWM_Start+0x1b0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d115      	bne.n	800217e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <HAL_TIM_PWM_Start+0x1b8>)
 800215a:	4013      	ands	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2b06      	cmp	r3, #6
 8002162:	d015      	beq.n	8002190 <HAL_TIM_PWM_Start+0x1a0>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216a:	d011      	beq.n	8002190 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800217c:	e008      	b.n	8002190 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 0201 	orr.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	e000      	b.n	8002192 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002190:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40012c00 	.word	0x40012c00
 80021a0:	40014000 	.word	0x40014000
 80021a4:	40014400 	.word	0x40014400
 80021a8:	00010007 	.word	0x00010007

080021ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e0ff      	b.n	80023ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b14      	cmp	r3, #20
 80021d6:	f200 80f0 	bhi.w	80023ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80021da:	a201      	add	r2, pc, #4	; (adr r2, 80021e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80021dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e0:	08002235 	.word	0x08002235
 80021e4:	080023bb 	.word	0x080023bb
 80021e8:	080023bb 	.word	0x080023bb
 80021ec:	080023bb 	.word	0x080023bb
 80021f0:	08002275 	.word	0x08002275
 80021f4:	080023bb 	.word	0x080023bb
 80021f8:	080023bb 	.word	0x080023bb
 80021fc:	080023bb 	.word	0x080023bb
 8002200:	080022b7 	.word	0x080022b7
 8002204:	080023bb 	.word	0x080023bb
 8002208:	080023bb 	.word	0x080023bb
 800220c:	080023bb 	.word	0x080023bb
 8002210:	080022f7 	.word	0x080022f7
 8002214:	080023bb 	.word	0x080023bb
 8002218:	080023bb 	.word	0x080023bb
 800221c:	080023bb 	.word	0x080023bb
 8002220:	08002339 	.word	0x08002339
 8002224:	080023bb 	.word	0x080023bb
 8002228:	080023bb 	.word	0x080023bb
 800222c:	080023bb 	.word	0x080023bb
 8002230:	08002379 	.word	0x08002379
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	4618      	mov	r0, r3
 800223c:	f000 f9f8 	bl	8002630 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0208 	orr.w	r2, r2, #8
 800224e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0204 	bic.w	r2, r2, #4
 800225e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6999      	ldr	r1, [r3, #24]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	619a      	str	r2, [r3, #24]
      break;
 8002272:	e0a5      	b.n	80023c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fa54 	bl	8002728 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699a      	ldr	r2, [r3, #24]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800228e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800229e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6999      	ldr	r1, [r3, #24]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	021a      	lsls	r2, r3, #8
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	619a      	str	r2, [r3, #24]
      break;
 80022b4:	e084      	b.n	80023c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 faad 	bl	800281c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	69da      	ldr	r2, [r3, #28]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0208 	orr.w	r2, r2, #8
 80022d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69da      	ldr	r2, [r3, #28]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0204 	bic.w	r2, r2, #4
 80022e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	69d9      	ldr	r1, [r3, #28]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	61da      	str	r2, [r3, #28]
      break;
 80022f4:	e064      	b.n	80023c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68b9      	ldr	r1, [r7, #8]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 fb05 	bl	800290c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69da      	ldr	r2, [r3, #28]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69da      	ldr	r2, [r3, #28]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	69d9      	ldr	r1, [r3, #28]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	021a      	lsls	r2, r3, #8
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	61da      	str	r2, [r3, #28]
      break;
 8002336:	e043      	b.n	80023c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	4618      	mov	r0, r3
 8002340:	f000 fb42 	bl	80029c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0208 	orr.w	r2, r2, #8
 8002352:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0204 	bic.w	r2, r2, #4
 8002362:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002376:	e023      	b.n	80023c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fb7a 	bl	8002a78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002392:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	021a      	lsls	r2, r3, #8
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80023b8:	e002      	b.n	80023c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	75fb      	strb	r3, [r7, #23]
      break;
 80023be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop

080023d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_TIM_ConfigClockSource+0x1c>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e0b6      	b.n	800255e <HAL_TIM_ConfigClockSource+0x18a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800241a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242c:	d03e      	beq.n	80024ac <HAL_TIM_ConfigClockSource+0xd8>
 800242e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002432:	f200 8087 	bhi.w	8002544 <HAL_TIM_ConfigClockSource+0x170>
 8002436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243a:	f000 8086 	beq.w	800254a <HAL_TIM_ConfigClockSource+0x176>
 800243e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002442:	d87f      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x170>
 8002444:	2b70      	cmp	r3, #112	; 0x70
 8002446:	d01a      	beq.n	800247e <HAL_TIM_ConfigClockSource+0xaa>
 8002448:	2b70      	cmp	r3, #112	; 0x70
 800244a:	d87b      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x170>
 800244c:	2b60      	cmp	r3, #96	; 0x60
 800244e:	d050      	beq.n	80024f2 <HAL_TIM_ConfigClockSource+0x11e>
 8002450:	2b60      	cmp	r3, #96	; 0x60
 8002452:	d877      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x170>
 8002454:	2b50      	cmp	r3, #80	; 0x50
 8002456:	d03c      	beq.n	80024d2 <HAL_TIM_ConfigClockSource+0xfe>
 8002458:	2b50      	cmp	r3, #80	; 0x50
 800245a:	d873      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x170>
 800245c:	2b40      	cmp	r3, #64	; 0x40
 800245e:	d058      	beq.n	8002512 <HAL_TIM_ConfigClockSource+0x13e>
 8002460:	2b40      	cmp	r3, #64	; 0x40
 8002462:	d86f      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x170>
 8002464:	2b30      	cmp	r3, #48	; 0x30
 8002466:	d064      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0x15e>
 8002468:	2b30      	cmp	r3, #48	; 0x30
 800246a:	d86b      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x170>
 800246c:	2b20      	cmp	r3, #32
 800246e:	d060      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0x15e>
 8002470:	2b20      	cmp	r3, #32
 8002472:	d867      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x170>
 8002474:	2b00      	cmp	r3, #0
 8002476:	d05c      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0x15e>
 8002478:	2b10      	cmp	r3, #16
 800247a:	d05a      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0x15e>
 800247c:	e062      	b.n	8002544 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800248e:	f000 fbc7 	bl	8002c20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	609a      	str	r2, [r3, #8]
      break;
 80024aa:	e04f      	b.n	800254c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024bc:	f000 fbb0 	bl	8002c20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ce:	609a      	str	r2, [r3, #8]
      break;
 80024d0:	e03c      	b.n	800254c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024de:	461a      	mov	r2, r3
 80024e0:	f000 fb24 	bl	8002b2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2150      	movs	r1, #80	; 0x50
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fb7d 	bl	8002bea <TIM_ITRx_SetConfig>
      break;
 80024f0:	e02c      	b.n	800254c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024fe:	461a      	mov	r2, r3
 8002500:	f000 fb43 	bl	8002b8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2160      	movs	r1, #96	; 0x60
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fb6d 	bl	8002bea <TIM_ITRx_SetConfig>
      break;
 8002510:	e01c      	b.n	800254c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800251e:	461a      	mov	r2, r3
 8002520:	f000 fb04 	bl	8002b2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2140      	movs	r1, #64	; 0x40
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fb5d 	bl	8002bea <TIM_ITRx_SetConfig>
      break;
 8002530:	e00c      	b.n	800254c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4619      	mov	r1, r3
 800253c:	4610      	mov	r0, r2
 800253e:	f000 fb54 	bl	8002bea <TIM_ITRx_SetConfig>
      break;
 8002542:	e003      	b.n	800254c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
      break;
 8002548:	e000      	b.n	800254c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800254a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800255c:	7bfb      	ldrb	r3, [r7, #15]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a2a      	ldr	r2, [pc, #168]	; (8002624 <TIM_Base_SetConfig+0xbc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d003      	beq.n	8002588 <TIM_Base_SetConfig+0x20>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002586:	d108      	bne.n	800259a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a21      	ldr	r2, [pc, #132]	; (8002624 <TIM_Base_SetConfig+0xbc>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00b      	beq.n	80025ba <TIM_Base_SetConfig+0x52>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a8:	d007      	beq.n	80025ba <TIM_Base_SetConfig+0x52>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <TIM_Base_SetConfig+0xc0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d003      	beq.n	80025ba <TIM_Base_SetConfig+0x52>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a1d      	ldr	r2, [pc, #116]	; (800262c <TIM_Base_SetConfig+0xc4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d108      	bne.n	80025cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a0c      	ldr	r2, [pc, #48]	; (8002624 <TIM_Base_SetConfig+0xbc>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d007      	beq.n	8002608 <TIM_Base_SetConfig+0xa0>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a0b      	ldr	r2, [pc, #44]	; (8002628 <TIM_Base_SetConfig+0xc0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d003      	beq.n	8002608 <TIM_Base_SetConfig+0xa0>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <TIM_Base_SetConfig+0xc4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d103      	bne.n	8002610 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	615a      	str	r2, [r3, #20]
}
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40012c00 	.word	0x40012c00
 8002628:	40014000 	.word	0x40014000
 800262c:	40014400 	.word	0x40014400

08002630 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f023 0201 	bic.w	r2, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f023 0303 	bic.w	r3, r3, #3
 800266a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f023 0302 	bic.w	r3, r3, #2
 800267c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4313      	orrs	r3, r2
 8002686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a24      	ldr	r2, [pc, #144]	; (800271c <TIM_OC1_SetConfig+0xec>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d007      	beq.n	80026a0 <TIM_OC1_SetConfig+0x70>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a23      	ldr	r2, [pc, #140]	; (8002720 <TIM_OC1_SetConfig+0xf0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d003      	beq.n	80026a0 <TIM_OC1_SetConfig+0x70>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a22      	ldr	r2, [pc, #136]	; (8002724 <TIM_OC1_SetConfig+0xf4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d10c      	bne.n	80026ba <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f023 0308 	bic.w	r3, r3, #8
 80026a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f023 0304 	bic.w	r3, r3, #4
 80026b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a17      	ldr	r2, [pc, #92]	; (800271c <TIM_OC1_SetConfig+0xec>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d007      	beq.n	80026d2 <TIM_OC1_SetConfig+0xa2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a16      	ldr	r2, [pc, #88]	; (8002720 <TIM_OC1_SetConfig+0xf0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d003      	beq.n	80026d2 <TIM_OC1_SetConfig+0xa2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a15      	ldr	r2, [pc, #84]	; (8002724 <TIM_OC1_SetConfig+0xf4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d111      	bne.n	80026f6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	621a      	str	r2, [r3, #32]
}
 8002710:	bf00      	nop
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40012c00 	.word	0x40012c00
 8002720:	40014000 	.word	0x40014000
 8002724:	40014400 	.word	0x40014400

08002728 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f023 0210 	bic.w	r2, r3, #16
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800275a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	021b      	lsls	r3, r3, #8
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f023 0320 	bic.w	r3, r3, #32
 8002776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a22      	ldr	r2, [pc, #136]	; (8002810 <TIM_OC2_SetConfig+0xe8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d10d      	bne.n	80027a8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a19      	ldr	r2, [pc, #100]	; (8002810 <TIM_OC2_SetConfig+0xe8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d007      	beq.n	80027c0 <TIM_OC2_SetConfig+0x98>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a18      	ldr	r2, [pc, #96]	; (8002814 <TIM_OC2_SetConfig+0xec>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d003      	beq.n	80027c0 <TIM_OC2_SetConfig+0x98>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a17      	ldr	r2, [pc, #92]	; (8002818 <TIM_OC2_SetConfig+0xf0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d113      	bne.n	80027e8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	621a      	str	r2, [r3, #32]
}
 8002802:	bf00      	nop
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40012c00 	.word	0x40012c00
 8002814:	40014000 	.word	0x40014000
 8002818:	40014400 	.word	0x40014400

0800281c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f023 0303 	bic.w	r3, r3, #3
 8002856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	4313      	orrs	r3, r2
 8002874:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a21      	ldr	r2, [pc, #132]	; (8002900 <TIM_OC3_SetConfig+0xe4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d10d      	bne.n	800289a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a18      	ldr	r2, [pc, #96]	; (8002900 <TIM_OC3_SetConfig+0xe4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d007      	beq.n	80028b2 <TIM_OC3_SetConfig+0x96>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a17      	ldr	r2, [pc, #92]	; (8002904 <TIM_OC3_SetConfig+0xe8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d003      	beq.n	80028b2 <TIM_OC3_SetConfig+0x96>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a16      	ldr	r2, [pc, #88]	; (8002908 <TIM_OC3_SetConfig+0xec>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d113      	bne.n	80028da <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	621a      	str	r2, [r3, #32]
}
 80028f4:	bf00      	nop
 80028f6:	371c      	adds	r7, #28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	40012c00 	.word	0x40012c00
 8002904:	40014000 	.word	0x40014000
 8002908:	40014400 	.word	0x40014400

0800290c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800290c:	b480      	push	{r7}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800293a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800293e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800295a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	031b      	lsls	r3, r3, #12
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a14      	ldr	r2, [pc, #80]	; (80029bc <TIM_OC4_SetConfig+0xb0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d007      	beq.n	8002980 <TIM_OC4_SetConfig+0x74>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a13      	ldr	r2, [pc, #76]	; (80029c0 <TIM_OC4_SetConfig+0xb4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d003      	beq.n	8002980 <TIM_OC4_SetConfig+0x74>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <TIM_OC4_SetConfig+0xb8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d109      	bne.n	8002994 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002986:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	019b      	lsls	r3, r3, #6
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4313      	orrs	r3, r2
 8002992:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	621a      	str	r2, [r3, #32]
}
 80029ae:	bf00      	nop
 80029b0:	371c      	adds	r7, #28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40012c00 	.word	0x40012c00
 80029c0:	40014000 	.word	0x40014000
 80029c4:	40014400 	.word	0x40014400

080029c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002a0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	041b      	lsls	r3, r3, #16
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <TIM_OC5_SetConfig+0xa4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d007      	beq.n	8002a32 <TIM_OC5_SetConfig+0x6a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <TIM_OC5_SetConfig+0xa8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d003      	beq.n	8002a32 <TIM_OC5_SetConfig+0x6a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a11      	ldr	r2, [pc, #68]	; (8002a74 <TIM_OC5_SetConfig+0xac>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d109      	bne.n	8002a46 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	621a      	str	r2, [r3, #32]
}
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	40012c00 	.word	0x40012c00
 8002a70:	40014000 	.word	0x40014000
 8002a74:	40014400 	.word	0x40014400

08002a78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002abe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	051b      	lsls	r3, r3, #20
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <TIM_OC6_SetConfig+0xa8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d007      	beq.n	8002ae4 <TIM_OC6_SetConfig+0x6c>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a13      	ldr	r2, [pc, #76]	; (8002b24 <TIM_OC6_SetConfig+0xac>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d003      	beq.n	8002ae4 <TIM_OC6_SetConfig+0x6c>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <TIM_OC6_SetConfig+0xb0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d109      	bne.n	8002af8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	029b      	lsls	r3, r3, #10
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	621a      	str	r2, [r3, #32]
}
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40012c00 	.word	0x40012c00
 8002b24:	40014000 	.word	0x40014000
 8002b28:	40014400 	.word	0x40014400

08002b2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	f023 0201 	bic.w	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f023 030a 	bic.w	r3, r3, #10
 8002b68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	621a      	str	r2, [r3, #32]
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b087      	sub	sp, #28
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	f023 0210 	bic.w	r2, r3, #16
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	031b      	lsls	r3, r3, #12
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	621a      	str	r2, [r3, #32]
}
 8002bde:	bf00      	nop
 8002be0:	371c      	adds	r7, #28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b085      	sub	sp, #20
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f043 0307 	orr.w	r3, r3, #7
 8002c0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	609a      	str	r2, [r3, #8]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	021a      	lsls	r2, r3, #8
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	609a      	str	r2, [r3, #8]
}
 8002c54:	bf00      	nop
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	2201      	movs	r2, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a1a      	ldr	r2, [r3, #32]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	43db      	mvns	r3, r3
 8002c82:	401a      	ands	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a1a      	ldr	r2, [r3, #32]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f003 031f 	and.w	r3, r3, #31
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	fa01 f303 	lsl.w	r3, r1, r3
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	621a      	str	r2, [r3, #32]
}
 8002c9e:	bf00      	nop
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e04f      	b.n	8002d64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a21      	ldr	r2, [pc, #132]	; (8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d108      	bne.n	8002d00 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002cf4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a14      	ldr	r2, [pc, #80]	; (8002d70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d009      	beq.n	8002d38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2c:	d004      	beq.n	8002d38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a10      	ldr	r2, [pc, #64]	; (8002d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d10c      	bne.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	40012c00 	.word	0x40012c00
 8002d74:	40014000 	.word	0x40014000

08002d78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e040      	b.n	8002e0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d106      	bne.n	8002da0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f001 f83a 	bl	8003e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2224      	movs	r2, #36	; 0x24
 8002da4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fa54 	bl	800326c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f825 	bl	8002e14 <UART_SetConfig>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e01b      	b.n	8002e0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002de2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002df2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 fad3 	bl	80033b0 <UART_CheckIdleState>
 8002e0a:	4603      	mov	r3, r0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e18:	b08a      	sub	sp, #40	; 0x28
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4bb4      	ldr	r3, [pc, #720]	; (8003114 <UART_SetConfig+0x300>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4aa9      	ldr	r2, [pc, #676]	; (8003118 <UART_SetConfig+0x304>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d004      	beq.n	8002e80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e90:	430a      	orrs	r2, r1
 8002e92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4aa0      	ldr	r2, [pc, #640]	; (800311c <UART_SetConfig+0x308>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d126      	bne.n	8002eec <UART_SetConfig+0xd8>
 8002e9e:	4ba0      	ldr	r3, [pc, #640]	; (8003120 <UART_SetConfig+0x30c>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d81b      	bhi.n	8002ee4 <UART_SetConfig+0xd0>
 8002eac:	a201      	add	r2, pc, #4	; (adr r2, 8002eb4 <UART_SetConfig+0xa0>)
 8002eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb2:	bf00      	nop
 8002eb4:	08002ec5 	.word	0x08002ec5
 8002eb8:	08002ed5 	.word	0x08002ed5
 8002ebc:	08002ecd 	.word	0x08002ecd
 8002ec0:	08002edd 	.word	0x08002edd
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eca:	e080      	b.n	8002fce <UART_SetConfig+0x1ba>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ed2:	e07c      	b.n	8002fce <UART_SetConfig+0x1ba>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eda:	e078      	b.n	8002fce <UART_SetConfig+0x1ba>
 8002edc:	2308      	movs	r3, #8
 8002ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ee2:	e074      	b.n	8002fce <UART_SetConfig+0x1ba>
 8002ee4:	2310      	movs	r3, #16
 8002ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eea:	e070      	b.n	8002fce <UART_SetConfig+0x1ba>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a8c      	ldr	r2, [pc, #560]	; (8003124 <UART_SetConfig+0x310>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d138      	bne.n	8002f68 <UART_SetConfig+0x154>
 8002ef6:	4b8a      	ldr	r3, [pc, #552]	; (8003120 <UART_SetConfig+0x30c>)
 8002ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b0c      	cmp	r3, #12
 8002f02:	d82d      	bhi.n	8002f60 <UART_SetConfig+0x14c>
 8002f04:	a201      	add	r2, pc, #4	; (adr r2, 8002f0c <UART_SetConfig+0xf8>)
 8002f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0a:	bf00      	nop
 8002f0c:	08002f41 	.word	0x08002f41
 8002f10:	08002f61 	.word	0x08002f61
 8002f14:	08002f61 	.word	0x08002f61
 8002f18:	08002f61 	.word	0x08002f61
 8002f1c:	08002f51 	.word	0x08002f51
 8002f20:	08002f61 	.word	0x08002f61
 8002f24:	08002f61 	.word	0x08002f61
 8002f28:	08002f61 	.word	0x08002f61
 8002f2c:	08002f49 	.word	0x08002f49
 8002f30:	08002f61 	.word	0x08002f61
 8002f34:	08002f61 	.word	0x08002f61
 8002f38:	08002f61 	.word	0x08002f61
 8002f3c:	08002f59 	.word	0x08002f59
 8002f40:	2300      	movs	r3, #0
 8002f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f46:	e042      	b.n	8002fce <UART_SetConfig+0x1ba>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f4e:	e03e      	b.n	8002fce <UART_SetConfig+0x1ba>
 8002f50:	2304      	movs	r3, #4
 8002f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f56:	e03a      	b.n	8002fce <UART_SetConfig+0x1ba>
 8002f58:	2308      	movs	r3, #8
 8002f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f5e:	e036      	b.n	8002fce <UART_SetConfig+0x1ba>
 8002f60:	2310      	movs	r3, #16
 8002f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f66:	e032      	b.n	8002fce <UART_SetConfig+0x1ba>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a6a      	ldr	r2, [pc, #424]	; (8003118 <UART_SetConfig+0x304>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d12a      	bne.n	8002fc8 <UART_SetConfig+0x1b4>
 8002f72:	4b6b      	ldr	r3, [pc, #428]	; (8003120 <UART_SetConfig+0x30c>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f80:	d01a      	beq.n	8002fb8 <UART_SetConfig+0x1a4>
 8002f82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f86:	d81b      	bhi.n	8002fc0 <UART_SetConfig+0x1ac>
 8002f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f8c:	d00c      	beq.n	8002fa8 <UART_SetConfig+0x194>
 8002f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f92:	d815      	bhi.n	8002fc0 <UART_SetConfig+0x1ac>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <UART_SetConfig+0x18c>
 8002f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9c:	d008      	beq.n	8002fb0 <UART_SetConfig+0x19c>
 8002f9e:	e00f      	b.n	8002fc0 <UART_SetConfig+0x1ac>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fa6:	e012      	b.n	8002fce <UART_SetConfig+0x1ba>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fae:	e00e      	b.n	8002fce <UART_SetConfig+0x1ba>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fb6:	e00a      	b.n	8002fce <UART_SetConfig+0x1ba>
 8002fb8:	2308      	movs	r3, #8
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fbe:	e006      	b.n	8002fce <UART_SetConfig+0x1ba>
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fc6:	e002      	b.n	8002fce <UART_SetConfig+0x1ba>
 8002fc8:	2310      	movs	r3, #16
 8002fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a51      	ldr	r2, [pc, #324]	; (8003118 <UART_SetConfig+0x304>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d17a      	bne.n	80030ce <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d824      	bhi.n	800302a <UART_SetConfig+0x216>
 8002fe0:	a201      	add	r2, pc, #4	; (adr r2, 8002fe8 <UART_SetConfig+0x1d4>)
 8002fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe6:	bf00      	nop
 8002fe8:	0800300d 	.word	0x0800300d
 8002fec:	0800302b 	.word	0x0800302b
 8002ff0:	08003015 	.word	0x08003015
 8002ff4:	0800302b 	.word	0x0800302b
 8002ff8:	0800301b 	.word	0x0800301b
 8002ffc:	0800302b 	.word	0x0800302b
 8003000:	0800302b 	.word	0x0800302b
 8003004:	0800302b 	.word	0x0800302b
 8003008:	08003023 	.word	0x08003023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800300c:	f7fe fbb4 	bl	8001778 <HAL_RCC_GetPCLK1Freq>
 8003010:	61f8      	str	r0, [r7, #28]
        break;
 8003012:	e010      	b.n	8003036 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003014:	4b44      	ldr	r3, [pc, #272]	; (8003128 <UART_SetConfig+0x314>)
 8003016:	61fb      	str	r3, [r7, #28]
        break;
 8003018:	e00d      	b.n	8003036 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800301a:	f7fe fb15 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 800301e:	61f8      	str	r0, [r7, #28]
        break;
 8003020:	e009      	b.n	8003036 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003026:	61fb      	str	r3, [r7, #28]
        break;
 8003028:	e005      	b.n	8003036 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003034:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8107 	beq.w	800324c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	4413      	add	r3, r2
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	429a      	cmp	r2, r3
 800304c:	d305      	bcc.n	800305a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	429a      	cmp	r2, r3
 8003058:	d903      	bls.n	8003062 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003060:	e0f4      	b.n	800324c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	2200      	movs	r2, #0
 8003066:	461c      	mov	r4, r3
 8003068:	4615      	mov	r5, r2
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	022b      	lsls	r3, r5, #8
 8003074:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003078:	0222      	lsls	r2, r4, #8
 800307a:	68f9      	ldr	r1, [r7, #12]
 800307c:	6849      	ldr	r1, [r1, #4]
 800307e:	0849      	lsrs	r1, r1, #1
 8003080:	2000      	movs	r0, #0
 8003082:	4688      	mov	r8, r1
 8003084:	4681      	mov	r9, r0
 8003086:	eb12 0a08 	adds.w	sl, r2, r8
 800308a:	eb43 0b09 	adc.w	fp, r3, r9
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	603b      	str	r3, [r7, #0]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800309c:	4650      	mov	r0, sl
 800309e:	4659      	mov	r1, fp
 80030a0:	f7fd f894 	bl	80001cc <__aeabi_uldivmod>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4613      	mov	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030b2:	d308      	bcc.n	80030c6 <UART_SetConfig+0x2b2>
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ba:	d204      	bcs.n	80030c6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	60da      	str	r2, [r3, #12]
 80030c4:	e0c2      	b.n	800324c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80030cc:	e0be      	b.n	800324c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d6:	d16a      	bne.n	80031ae <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80030d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d834      	bhi.n	800314a <UART_SetConfig+0x336>
 80030e0:	a201      	add	r2, pc, #4	; (adr r2, 80030e8 <UART_SetConfig+0x2d4>)
 80030e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e6:	bf00      	nop
 80030e8:	0800310d 	.word	0x0800310d
 80030ec:	0800312d 	.word	0x0800312d
 80030f0:	08003135 	.word	0x08003135
 80030f4:	0800314b 	.word	0x0800314b
 80030f8:	0800313b 	.word	0x0800313b
 80030fc:	0800314b 	.word	0x0800314b
 8003100:	0800314b 	.word	0x0800314b
 8003104:	0800314b 	.word	0x0800314b
 8003108:	08003143 	.word	0x08003143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800310c:	f7fe fb34 	bl	8001778 <HAL_RCC_GetPCLK1Freq>
 8003110:	61f8      	str	r0, [r7, #28]
        break;
 8003112:	e020      	b.n	8003156 <UART_SetConfig+0x342>
 8003114:	efff69f3 	.word	0xefff69f3
 8003118:	40008000 	.word	0x40008000
 800311c:	40013800 	.word	0x40013800
 8003120:	40021000 	.word	0x40021000
 8003124:	40004400 	.word	0x40004400
 8003128:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800312c:	f7fe fb3a 	bl	80017a4 <HAL_RCC_GetPCLK2Freq>
 8003130:	61f8      	str	r0, [r7, #28]
        break;
 8003132:	e010      	b.n	8003156 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003134:	4b4c      	ldr	r3, [pc, #304]	; (8003268 <UART_SetConfig+0x454>)
 8003136:	61fb      	str	r3, [r7, #28]
        break;
 8003138:	e00d      	b.n	8003156 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800313a:	f7fe fa85 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 800313e:	61f8      	str	r0, [r7, #28]
        break;
 8003140:	e009      	b.n	8003156 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003146:	61fb      	str	r3, [r7, #28]
        break;
 8003148:	e005      	b.n	8003156 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003154:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d077      	beq.n	800324c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	005a      	lsls	r2, r3, #1
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	441a      	add	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003170:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b0f      	cmp	r3, #15
 8003176:	d916      	bls.n	80031a6 <UART_SetConfig+0x392>
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317e:	d212      	bcs.n	80031a6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	b29b      	uxth	r3, r3
 8003184:	f023 030f 	bic.w	r3, r3, #15
 8003188:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	085b      	lsrs	r3, r3, #1
 800318e:	b29b      	uxth	r3, r3
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	b29a      	uxth	r2, r3
 8003196:	8afb      	ldrh	r3, [r7, #22]
 8003198:	4313      	orrs	r3, r2
 800319a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	8afa      	ldrh	r2, [r7, #22]
 80031a2:	60da      	str	r2, [r3, #12]
 80031a4:	e052      	b.n	800324c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031ac:	e04e      	b.n	800324c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d827      	bhi.n	8003206 <UART_SetConfig+0x3f2>
 80031b6:	a201      	add	r2, pc, #4	; (adr r2, 80031bc <UART_SetConfig+0x3a8>)
 80031b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031bc:	080031e1 	.word	0x080031e1
 80031c0:	080031e9 	.word	0x080031e9
 80031c4:	080031f1 	.word	0x080031f1
 80031c8:	08003207 	.word	0x08003207
 80031cc:	080031f7 	.word	0x080031f7
 80031d0:	08003207 	.word	0x08003207
 80031d4:	08003207 	.word	0x08003207
 80031d8:	08003207 	.word	0x08003207
 80031dc:	080031ff 	.word	0x080031ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031e0:	f7fe faca 	bl	8001778 <HAL_RCC_GetPCLK1Freq>
 80031e4:	61f8      	str	r0, [r7, #28]
        break;
 80031e6:	e014      	b.n	8003212 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031e8:	f7fe fadc 	bl	80017a4 <HAL_RCC_GetPCLK2Freq>
 80031ec:	61f8      	str	r0, [r7, #28]
        break;
 80031ee:	e010      	b.n	8003212 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <UART_SetConfig+0x454>)
 80031f2:	61fb      	str	r3, [r7, #28]
        break;
 80031f4:	e00d      	b.n	8003212 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031f6:	f7fe fa27 	bl	8001648 <HAL_RCC_GetSysClockFreq>
 80031fa:	61f8      	str	r0, [r7, #28]
        break;
 80031fc:	e009      	b.n	8003212 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003202:	61fb      	str	r3, [r7, #28]
        break;
 8003204:	e005      	b.n	8003212 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003210:	bf00      	nop
    }

    if (pclk != 0U)
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d019      	beq.n	800324c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	085a      	lsrs	r2, r3, #1
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	441a      	add	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	2b0f      	cmp	r3, #15
 8003230:	d909      	bls.n	8003246 <UART_SetConfig+0x432>
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003238:	d205      	bcs.n	8003246 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60da      	str	r2, [r3, #12]
 8003244:	e002      	b.n	800324c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003258:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800325c:	4618      	mov	r0, r3
 800325e:	3728      	adds	r7, #40	; 0x28
 8003260:	46bd      	mov	sp, r7
 8003262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003266:	bf00      	nop
 8003268:	00f42400 	.word	0x00f42400

0800326c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01a      	beq.n	8003382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800336a:	d10a      	bne.n	8003382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]
  }
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b098      	sub	sp, #96	; 0x60
 80033b4:	af02      	add	r7, sp, #8
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033c0:	f7fd f8ea 	bl	8000598 <HAL_GetTick>
 80033c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d12e      	bne.n	8003432 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033dc:	2200      	movs	r2, #0
 80033de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f88c 	bl	8003500 <UART_WaitOnFlagUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d021      	beq.n	8003432 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f6:	e853 3f00 	ldrex	r3, [r3]
 80033fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003402:	653b      	str	r3, [r7, #80]	; 0x50
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800340c:	647b      	str	r3, [r7, #68]	; 0x44
 800340e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003410:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003414:	e841 2300 	strex	r3, r2, [r1]
 8003418:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800341a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e6      	bne.n	80033ee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e062      	b.n	80034f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b04      	cmp	r3, #4
 800343e:	d149      	bne.n	80034d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003440:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003448:	2200      	movs	r2, #0
 800344a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f856 	bl	8003500 <UART_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d03c      	beq.n	80034d4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	e853 3f00 	ldrex	r3, [r3]
 8003466:	623b      	str	r3, [r7, #32]
   return(result);
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800346e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003478:	633b      	str	r3, [r7, #48]	; 0x30
 800347a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800347e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003480:	e841 2300 	strex	r3, r2, [r1]
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e6      	bne.n	800345a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3308      	adds	r3, #8
 8003492:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	e853 3f00 	ldrex	r3, [r3]
 800349a:	60fb      	str	r3, [r7, #12]
   return(result);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3308      	adds	r3, #8
 80034aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034ac:	61fa      	str	r2, [r7, #28]
 80034ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b0:	69b9      	ldr	r1, [r7, #24]
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	e841 2300 	strex	r3, r2, [r1]
 80034b8:	617b      	str	r3, [r7, #20]
   return(result);
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1e5      	bne.n	800348c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e011      	b.n	80034f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3758      	adds	r7, #88	; 0x58
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003510:	e049      	b.n	80035a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d045      	beq.n	80035a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351a:	f7fd f83d 	bl	8000598 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	429a      	cmp	r2, r3
 8003528:	d302      	bcc.n	8003530 <UART_WaitOnFlagUntilTimeout+0x30>
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e048      	b.n	80035c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	d031      	beq.n	80035a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b08      	cmp	r3, #8
 800354e:	d110      	bne.n	8003572 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2208      	movs	r2, #8
 8003556:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 f838 	bl	80035ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2208      	movs	r2, #8
 8003562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e029      	b.n	80035c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003580:	d111      	bne.n	80035a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800358a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 f81e 	bl	80035ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e00f      	b.n	80035c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	69da      	ldr	r2, [r3, #28]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4013      	ands	r3, r2
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	bf0c      	ite	eq
 80035b6:	2301      	moveq	r3, #1
 80035b8:	2300      	movne	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	461a      	mov	r2, r3
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d0a6      	beq.n	8003512 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b095      	sub	sp, #84	; 0x54
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035de:	e853 3f00 	ldrex	r3, [r3]
 80035e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f4:	643b      	str	r3, [r7, #64]	; 0x40
 80035f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035fc:	e841 2300 	strex	r3, r2, [r1]
 8003600:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1e6      	bne.n	80035d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3308      	adds	r3, #8
 800360e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	e853 3f00 	ldrex	r3, [r3]
 8003616:	61fb      	str	r3, [r7, #28]
   return(result);
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3308      	adds	r3, #8
 8003626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003628:	62fa      	str	r2, [r7, #44]	; 0x2c
 800362a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800362e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003630:	e841 2300 	strex	r3, r2, [r1]
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1e5      	bne.n	8003608 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003640:	2b01      	cmp	r3, #1
 8003642:	d118      	bne.n	8003676 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	e853 3f00 	ldrex	r3, [r3]
 8003650:	60bb      	str	r3, [r7, #8]
   return(result);
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f023 0310 	bic.w	r3, r3, #16
 8003658:	647b      	str	r3, [r7, #68]	; 0x44
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003662:	61bb      	str	r3, [r7, #24]
 8003664:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003666:	6979      	ldr	r1, [r7, #20]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	e841 2300 	strex	r3, r2, [r1]
 800366e:	613b      	str	r3, [r7, #16]
   return(result);
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e6      	bne.n	8003644 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	669a      	str	r2, [r3, #104]	; 0x68
}
 800368a:	bf00      	nop
 800368c:	3754      	adds	r7, #84	; 0x54
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <HAL_GPIO_EXTI_Callback>:
// Define constants



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7)
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	2b80      	cmp	r3, #128	; 0x80
 80036a6:	d115      	bne.n	80036d4 <HAL_GPIO_EXTI_Callback+0x3c>
    {


    	GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 80036a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036b0:	f7fd f9fa 	bl	8000aa8 <HAL_GPIO_ReadPin>
 80036b4:	4603      	mov	r3, r0
 80036b6:	73fb      	strb	r3, [r7, #15]

    	        // Update encoder count based on the state of GPIO_PIN_11
    	        if (pinState == GPIO_PIN_SET)
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d105      	bne.n	80036ca <HAL_GPIO_EXTI_Callback+0x32>
    	        {
    	            EN1++;
 80036be:	4b14      	ldr	r3, [pc, #80]	; (8003710 <HAL_GPIO_EXTI_Callback+0x78>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3301      	adds	r3, #1
 80036c4:	4a12      	ldr	r2, [pc, #72]	; (8003710 <HAL_GPIO_EXTI_Callback+0x78>)
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	e004      	b.n	80036d4 <HAL_GPIO_EXTI_Callback+0x3c>
    	        }
    	        else
    	        {
    	            EN1--;
 80036ca:	4b11      	ldr	r3, [pc, #68]	; (8003710 <HAL_GPIO_EXTI_Callback+0x78>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	4a0f      	ldr	r2, [pc, #60]	; (8003710 <HAL_GPIO_EXTI_Callback+0x78>)
 80036d2:	6013      	str	r3, [r2, #0]
    	        }

    }

    if (GPIO_Pin == GPIO_PIN_0)
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d115      	bne.n	8003706 <HAL_GPIO_EXTI_Callback+0x6e>
    {
        // Read current state of encoder pin PB0

    	GPIO_PinState pinState2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80036da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036e2:	f7fd f9e1 	bl	8000aa8 <HAL_GPIO_ReadPin>
 80036e6:	4603      	mov	r3, r0
 80036e8:	73bb      	strb	r3, [r7, #14]

    	 // Update encoder count based on the state of GPIO_PIN_11
    	    	        if (pinState2 == GPIO_PIN_SET)
 80036ea:	7bbb      	ldrb	r3, [r7, #14]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d105      	bne.n	80036fc <HAL_GPIO_EXTI_Callback+0x64>
    	    	        {
    	    	            EN2++;
 80036f0:	4b08      	ldr	r3, [pc, #32]	; (8003714 <HAL_GPIO_EXTI_Callback+0x7c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3301      	adds	r3, #1
 80036f6:	4a07      	ldr	r2, [pc, #28]	; (8003714 <HAL_GPIO_EXTI_Callback+0x7c>)
 80036f8:	6013      	str	r3, [r2, #0]
    	    	        else
    	    	        {
    	    	            EN2--;
    	    	        }
    }
}
 80036fa:	e004      	b.n	8003706 <HAL_GPIO_EXTI_Callback+0x6e>
    	    	            EN2--;
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_GPIO_EXTI_Callback+0x7c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3b01      	subs	r3, #1
 8003702:	4a04      	ldr	r2, [pc, #16]	; (8003714 <HAL_GPIO_EXTI_Callback+0x7c>)
 8003704:	6013      	str	r3, [r2, #0]
}
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000188 	.word	0x20000188
 8003714:	2000018c 	.word	0x2000018c

08003718 <turn_90_degrees_left>:


void turn_90_degrees_left() {
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
	EN1 = 0;
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <turn_90_degrees_left+0x34>)
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
	EN2 = 0;
 8003722:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <turn_90_degrees_left+0x38>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
	    while (EN1 <=220 && EN2 <= 220) {
 8003728:	e005      	b.n	8003736 <turn_90_degrees_left+0x1e>

	        MoveMotorRightForward(55);
 800372a:	2037      	movs	r0, #55	; 0x37
 800372c:	f000 f84a 	bl	80037c4 <MoveMotorRightForward>
	        MoveMotorLeftBackward(60);
 8003730:	203c      	movs	r0, #60	; 0x3c
 8003732:	f000 f80f 	bl	8003754 <MoveMotorLeftBackward>
	    while (EN1 <=220 && EN2 <= 220) {
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <turn_90_degrees_left+0x34>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2bdc      	cmp	r3, #220	; 0xdc
 800373c:	dc03      	bgt.n	8003746 <turn_90_degrees_left+0x2e>
 800373e:	4b04      	ldr	r3, [pc, #16]	; (8003750 <turn_90_degrees_left+0x38>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2bdc      	cmp	r3, #220	; 0xdc
 8003744:	ddf1      	ble.n	800372a <turn_90_degrees_left+0x12>

	    }
}
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000188 	.word	0x20000188
 8003750:	2000018c 	.word	0x2000018c

08003754 <MoveMotorLeftBackward>:
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
}



void MoveMotorLeftBackward(uint8_t speed) {
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
    // Set motor to spin forward
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET ); // BIN1 = High
 800375e:	2201      	movs	r2, #1
 8003760:	2120      	movs	r1, #32
 8003762:	4808      	ldr	r0, [pc, #32]	; (8003784 <MoveMotorLeftBackward+0x30>)
 8003764:	f7fd f9b8 	bl	8000ad8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // BIN2 = Low
 8003768:	2200      	movs	r2, #0
 800376a:	2102      	movs	r1, #2
 800376c:	4805      	ldr	r0, [pc, #20]	; (8003784 <MoveMotorLeftBackward+0x30>)
 800376e:	f7fd f9b3 	bl	8000ad8 <HAL_GPIO_WritePin>

    // Set speed

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed);
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <MoveMotorLeftBackward+0x34>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	79fa      	ldrb	r2, [r7, #7]
 8003778:	639a      	str	r2, [r3, #56]	; 0x38
    //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Ensure PWM is started

}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	48000400 	.word	0x48000400
 8003788:	2000002c 	.word	0x2000002c

0800378c <MoveMotorLeftForward>:
void MoveMotorLeftForward(uint8_t speed) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	71fb      	strb	r3, [r7, #7]
    // Set motor to spin backward
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // BIN1 = Low
 8003796:	2200      	movs	r2, #0
 8003798:	2120      	movs	r1, #32
 800379a:	4808      	ldr	r0, [pc, #32]	; (80037bc <MoveMotorLeftForward+0x30>)
 800379c:	f7fd f99c 	bl	8000ad8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // BIN2 = High
 80037a0:	2201      	movs	r2, #1
 80037a2:	2102      	movs	r1, #2
 80037a4:	4805      	ldr	r0, [pc, #20]	; (80037bc <MoveMotorLeftForward+0x30>)
 80037a6:	f7fd f997 	bl	8000ad8 <HAL_GPIO_WritePin>

    // Set speed

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed);
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <MoveMotorLeftForward+0x34>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	79fa      	ldrb	r2, [r7, #7]
 80037b0:	639a      	str	r2, [r3, #56]	; 0x38
   // HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Ensure PWM is started
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	48000400 	.word	0x48000400
 80037c0:	2000002c 	.word	0x2000002c

080037c4 <MoveMotorRightForward>:

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, speed);

}

void MoveMotorRightForward(uint8_t speed) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	71fb      	strb	r3, [r7, #7]
    // Set motor2 to spin backward
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // IN1 = Low
 80037ce:	2200      	movs	r2, #0
 80037d0:	2110      	movs	r1, #16
 80037d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037d6:	f7fd f97f 	bl	8000ad8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);   // BIN2 = High
 80037da:	2201      	movs	r2, #1
 80037dc:	2180      	movs	r1, #128	; 0x80
 80037de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037e2:	f7fd f979 	bl	8000ad8 <HAL_GPIO_WritePin>

    // Set speed for motor2

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, speed);
 80037e6:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <MoveMotorRightForward+0x34>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	79fa      	ldrb	r2, [r7, #7]
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40

}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	2000002c 	.word	0x2000002c

080037fc <FollowLine>:
void FollowLine(void) {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
    int leftSensorStatus = HAL_GPIO_ReadPin(GPIOA, GPIO_FL_In_Pin);  // Read left IR sensor
 8003802:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800380a:	f7fd f94d 	bl	8000aa8 <HAL_GPIO_ReadPin>
 800380e:	4603      	mov	r3, r0
 8003810:	607b      	str	r3, [r7, #4]
    int rightSensorStatus = HAL_GPIO_ReadPin(GPIOB,GPIO_FR_In_Pin); // Read right IR sensor
 8003812:	2110      	movs	r1, #16
 8003814:	4817      	ldr	r0, [pc, #92]	; (8003874 <FollowLine+0x78>)
 8003816:	f7fd f947 	bl	8000aa8 <HAL_GPIO_ReadPin>
 800381a:	4603      	mov	r3, r0
 800381c:	603b      	str	r3, [r7, #0]

    if (leftSensorStatus == GPIO_PIN_RESET && rightSensorStatus == GPIO_PIN_RESET) {
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d109      	bne.n	8003838 <FollowLine+0x3c>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <FollowLine+0x3c>
        // Both sensors detect the line, move forward
        MoveMotorLeftForward(65);
 800382a:	2041      	movs	r0, #65	; 0x41
 800382c:	f7ff ffae 	bl	800378c <MoveMotorLeftForward>
        MoveMotorRightForward(70);
 8003830:	2046      	movs	r0, #70	; 0x46
 8003832:	f7ff ffc7 	bl	80037c4 <MoveMotorRightForward>
 8003836:	e019      	b.n	800386c <FollowLine+0x70>

    } else if (leftSensorStatus == GPIO_PIN_RESET && rightSensorStatus == GPIO_PIN_SET) {
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <FollowLine+0x56>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d106      	bne.n	8003852 <FollowLine+0x56>
        // Left sensor detects the line, right sen doesnt detect, turn slightly left
        MoveMotorLeftForward(20);
 8003844:	2014      	movs	r0, #20
 8003846:	f7ff ffa1 	bl	800378c <MoveMotorLeftForward>
        MoveMotorRightForward(80);
 800384a:	2050      	movs	r0, #80	; 0x50
 800384c:	f7ff ffba 	bl	80037c4 <MoveMotorRightForward>
 8003850:	e00c      	b.n	800386c <FollowLine+0x70>

    } else if  ( leftSensorStatus== GPIO_PIN_SET && rightSensorStatus == GPIO_PIN_RESET){
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d109      	bne.n	800386c <FollowLine+0x70>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <FollowLine+0x70>

        // Left sensor doesnt detects the line, right sensor detects the line, turn slightly right
        MoveMotorLeftForward(80);
 800385e:	2050      	movs	r0, #80	; 0x50
 8003860:	f7ff ff94 	bl	800378c <MoveMotorLeftForward>
        MoveMotorRightForward(24);
 8003864:	2018      	movs	r0, #24
 8003866:	f7ff ffad 	bl	80037c4 <MoveMotorRightForward>


    }


}
 800386a:	e7ff      	b.n	800386c <FollowLine+0x70>
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	48000400 	.word	0x48000400

08003878 <follow_right_wall>:

void follow_right_wall(void) {
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0


	//GPIO_PIN_RESET - wall detecting
	 right_wall = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 800387c:	2140      	movs	r1, #64	; 0x40
 800387e:	4828      	ldr	r0, [pc, #160]	; (8003920 <follow_right_wall+0xa8>)
 8003880:	f7fd f912 	bl	8000aa8 <HAL_GPIO_ReadPin>
 8003884:	4603      	mov	r3, r0
 8003886:	461a      	mov	r2, r3
 8003888:	4b26      	ldr	r3, [pc, #152]	; (8003924 <follow_right_wall+0xac>)
 800388a:	701a      	strb	r2, [r3, #0]
     front_wall = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 800388c:	2120      	movs	r1, #32
 800388e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003892:	f7fd f909 	bl	8000aa8 <HAL_GPIO_ReadPin>
 8003896:	4603      	mov	r3, r0
 8003898:	461a      	mov	r2, r3
 800389a:	4b23      	ldr	r3, [pc, #140]	; (8003928 <follow_right_wall+0xb0>)
 800389c:	701a      	strb	r2, [r3, #0]
     rightSensorStatus = HAL_GPIO_ReadPin(GPIOB, GPIO_FR_In_Pin);
 800389e:	2110      	movs	r1, #16
 80038a0:	481f      	ldr	r0, [pc, #124]	; (8003920 <follow_right_wall+0xa8>)
 80038a2:	f7fd f901 	bl	8000aa8 <HAL_GPIO_ReadPin>
 80038a6:	4603      	mov	r3, r0
 80038a8:	461a      	mov	r2, r3
 80038aa:	4b20      	ldr	r3, [pc, #128]	; (800392c <follow_right_wall+0xb4>)
 80038ac:	701a      	strb	r2, [r3, #0]
     leftSensorStatus = HAL_GPIO_ReadPin(GPIOA, GPIO_FL_In_Pin);
 80038ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038b6:	f7fd f8f7 	bl	8000aa8 <HAL_GPIO_ReadPin>
 80038ba:	4603      	mov	r3, r0
 80038bc:	461a      	mov	r2, r3
 80038be:	4b1c      	ldr	r3, [pc, #112]	; (8003930 <follow_right_wall+0xb8>)
 80038c0:	701a      	strb	r2, [r3, #0]





    if (right_wall == GPIO_PIN_RESET){
 80038c2:	4b18      	ldr	r3, [pc, #96]	; (8003924 <follow_right_wall+0xac>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d106      	bne.n	80038da <follow_right_wall+0x62>


   	//go straight
   	   MoveMotorLeftForward(55);
 80038cc:	2037      	movs	r0, #55	; 0x37
 80038ce:	f7ff ff5d 	bl	800378c <MoveMotorLeftForward>
   	   MoveMotorRightForward(60);
 80038d2:	203c      	movs	r0, #60	; 0x3c
 80038d4:	f7ff ff76 	bl	80037c4 <MoveMotorRightForward>
        FollowLine();

    }


}
 80038d8:	e020      	b.n	800391c <follow_right_wall+0xa4>
    }else if(right_wall == GPIO_PIN_SET) {
 80038da:	4b12      	ldr	r3, [pc, #72]	; (8003924 <follow_right_wall+0xac>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d106      	bne.n	80038f2 <follow_right_wall+0x7a>
   	    MoveMotorLeftForward(80);
 80038e4:	2050      	movs	r0, #80	; 0x50
 80038e6:	f7ff ff51 	bl	800378c <MoveMotorLeftForward>
   	    MoveMotorRightForward(30);
 80038ea:	201e      	movs	r0, #30
 80038ec:	f7ff ff6a 	bl	80037c4 <MoveMotorRightForward>
}
 80038f0:	e014      	b.n	800391c <follow_right_wall+0xa4>
    }else if(front_wall == GPIO_PIN_RESET){
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <follow_right_wall+0xb0>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d102      	bne.n	8003902 <follow_right_wall+0x8a>
    	turn_90_degrees_left();
 80038fc:	f7ff ff0c 	bl	8003718 <turn_90_degrees_left>
}
 8003900:	e00c      	b.n	800391c <follow_right_wall+0xa4>
    }else if (rightSensorStatus == GPIO_PIN_SET) {
 8003902:	4b0a      	ldr	r3, [pc, #40]	; (800392c <follow_right_wall+0xb4>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d107      	bne.n	800391c <follow_right_wall+0xa4>
    	MoveMotorLeftForward(30);
 800390c:	201e      	movs	r0, #30
 800390e:	f7ff ff3d 	bl	800378c <MoveMotorLeftForward>
        MoveMotorRightForward(70);
 8003912:	2046      	movs	r0, #70	; 0x46
 8003914:	f7ff ff56 	bl	80037c4 <MoveMotorRightForward>
        FollowLine();
 8003918:	f7ff ff70 	bl	80037fc <FollowLine>
}
 800391c:	bf00      	nop
 800391e:	bd80      	pop	{r7, pc}
 8003920:	48000400 	.word	0x48000400
 8003924:	20000190 	.word	0x20000190
 8003928:	20000191 	.word	0x20000191
 800392c:	20000192 	.word	0x20000192
 8003930:	20000193 	.word	0x20000193

08003934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003938:	f7fc fdc6 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800393c:	f000 f816 	bl	800396c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003940:	f000 f956 	bl	8003bf0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8003944:	f000 f874 	bl	8003a30 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8003948:	f000 f922 	bl	8003b90 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800394c:	f000 f8f0 	bl	8003b30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialization code somewhere after configuring the PWM channel


    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); 									// Start PWM on TIM2, Channel 2     (Motor B)
 8003950:	2104      	movs	r1, #4
 8003952:	4805      	ldr	r0, [pc, #20]	; (8003968 <main+0x34>)
 8003954:	f7fe fb4c 	bl	8001ff0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); 									// Start PWM on TIM2, Channel       (Motor A)
 8003958:	210c      	movs	r1, #12
 800395a:	4803      	ldr	r0, [pc, #12]	; (8003968 <main+0x34>)
 800395c:	f7fe fb48 	bl	8001ff0 <HAL_TIM_PWM_Start>
//	          HAL_UART_Transmit(&huart2, (uint8_t*)msg, msg_length, HAL_MAX_DELAY);
//



	  follow_right_wall();
 8003960:	f7ff ff8a 	bl	8003878 <follow_right_wall>
 8003964:	e7fc      	b.n	8003960 <main+0x2c>
 8003966:	bf00      	nop
 8003968:	2000002c 	.word	0x2000002c

0800396c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b096      	sub	sp, #88	; 0x58
 8003970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003972:	f107 0314 	add.w	r3, r7, #20
 8003976:	2244      	movs	r2, #68	; 0x44
 8003978:	2100      	movs	r1, #0
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fb67 	bl	800404e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003980:	463b      	mov	r3, r7
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	605a      	str	r2, [r3, #4]
 8003988:	609a      	str	r2, [r3, #8]
 800398a:	60da      	str	r2, [r3, #12]
 800398c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800398e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003992:	f7fd f8ef 	bl	8000b74 <HAL_PWREx_ControlVoltageScaling>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800399c:	f000 f9be 	bl	8003d1c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80039a0:	f7fd f8ca 	bl	8000b38 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80039a4:	4b21      	ldr	r3, [pc, #132]	; (8003a2c <SystemClock_Config+0xc0>)
 80039a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039aa:	4a20      	ldr	r2, [pc, #128]	; (8003a2c <SystemClock_Config+0xc0>)
 80039ac:	f023 0318 	bic.w	r3, r3, #24
 80039b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80039b4:	2314      	movs	r3, #20
 80039b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80039b8:	2301      	movs	r3, #1
 80039ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80039bc:	2301      	movs	r3, #1
 80039be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80039c4:	2360      	movs	r3, #96	; 0x60
 80039c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039c8:	2302      	movs	r3, #2
 80039ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80039cc:	2301      	movs	r3, #1
 80039ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80039d0:	2301      	movs	r3, #1
 80039d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80039d4:	2310      	movs	r3, #16
 80039d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80039d8:	2307      	movs	r3, #7
 80039da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80039dc:	2302      	movs	r3, #2
 80039de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80039e0:	2302      	movs	r3, #2
 80039e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039e4:	f107 0314 	add.w	r3, r7, #20
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fd f919 	bl	8000c20 <HAL_RCC_OscConfig>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80039f4:	f000 f992 	bl	8003d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039f8:	230f      	movs	r3, #15
 80039fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039fc:	2303      	movs	r3, #3
 80039fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003a0c:	463b      	mov	r3, r7
 8003a0e:	2101      	movs	r1, #1
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fd fd19 	bl	8001448 <HAL_RCC_ClockConfig>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003a1c:	f000 f97e 	bl	8003d1c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003a20:	f7fe f92c 	bl	8001c7c <HAL_RCCEx_EnableMSIPLLMode>
}
 8003a24:	bf00      	nop
 8003a26:	3758      	adds	r7, #88	; 0x58
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40021000 	.word	0x40021000

08003a30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08e      	sub	sp, #56	; 0x38
 8003a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	605a      	str	r2, [r3, #4]
 8003a40:	609a      	str	r2, [r3, #8]
 8003a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a44:	f107 031c 	add.w	r3, r7, #28
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a50:	463b      	mov	r3, r7
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	605a      	str	r2, [r3, #4]
 8003a58:	609a      	str	r2, [r3, #8]
 8003a5a:	60da      	str	r2, [r3, #12]
 8003a5c:	611a      	str	r2, [r3, #16]
 8003a5e:	615a      	str	r2, [r3, #20]
 8003a60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a62:	4b32      	ldr	r3, [pc, #200]	; (8003b2c <MX_TIM2_Init+0xfc>)
 8003a64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8003a6a:	4b30      	ldr	r3, [pc, #192]	; (8003b2c <MX_TIM2_Init+0xfc>)
 8003a6c:	221f      	movs	r2, #31
 8003a6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a70:	4b2e      	ldr	r3, [pc, #184]	; (8003b2c <MX_TIM2_Init+0xfc>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8003a76:	4b2d      	ldr	r3, [pc, #180]	; (8003b2c <MX_TIM2_Init+0xfc>)
 8003a78:	2263      	movs	r2, #99	; 0x63
 8003a7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a7c:	4b2b      	ldr	r3, [pc, #172]	; (8003b2c <MX_TIM2_Init+0xfc>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a82:	4b2a      	ldr	r3, [pc, #168]	; (8003b2c <MX_TIM2_Init+0xfc>)
 8003a84:	2280      	movs	r2, #128	; 0x80
 8003a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a88:	4828      	ldr	r0, [pc, #160]	; (8003b2c <MX_TIM2_Init+0xfc>)
 8003a8a:	f7fe f9f9 	bl	8001e80 <HAL_TIM_Base_Init>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003a94:	f000 f942 	bl	8003d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4821      	ldr	r0, [pc, #132]	; (8003b2c <MX_TIM2_Init+0xfc>)
 8003aa6:	f7fe fc95 	bl	80023d4 <HAL_TIM_ConfigClockSource>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003ab0:	f000 f934 	bl	8003d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003ab4:	481d      	ldr	r0, [pc, #116]	; (8003b2c <MX_TIM2_Init+0xfc>)
 8003ab6:	f7fe fa3a 	bl	8001f2e <HAL_TIM_PWM_Init>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003ac0:	f000 f92c 	bl	8003d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003acc:	f107 031c 	add.w	r3, r7, #28
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4816      	ldr	r0, [pc, #88]	; (8003b2c <MX_TIM2_Init+0xfc>)
 8003ad4:	f7ff f8ea 	bl	8002cac <HAL_TIMEx_MasterConfigSynchronization>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003ade:	f000 f91d 	bl	8003d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ae2:	2360      	movs	r3, #96	; 0x60
 8003ae4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003aee:	2300      	movs	r3, #0
 8003af0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003af2:	463b      	mov	r3, r7
 8003af4:	2204      	movs	r2, #4
 8003af6:	4619      	mov	r1, r3
 8003af8:	480c      	ldr	r0, [pc, #48]	; (8003b2c <MX_TIM2_Init+0xfc>)
 8003afa:	f7fe fb57 	bl	80021ac <HAL_TIM_PWM_ConfigChannel>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003b04:	f000 f90a 	bl	8003d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003b08:	463b      	mov	r3, r7
 8003b0a:	220c      	movs	r2, #12
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4807      	ldr	r0, [pc, #28]	; (8003b2c <MX_TIM2_Init+0xfc>)
 8003b10:	f7fe fb4c 	bl	80021ac <HAL_TIM_PWM_ConfigChannel>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8003b1a:	f000 f8ff 	bl	8003d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003b1e:	4803      	ldr	r0, [pc, #12]	; (8003b2c <MX_TIM2_Init+0xfc>)
 8003b20:	f000 f944 	bl	8003dac <HAL_TIM_MspPostInit>

}
 8003b24:	bf00      	nop
 8003b26:	3738      	adds	r7, #56	; 0x38
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	2000002c 	.word	0x2000002c

08003b30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b34:	4b14      	ldr	r3, [pc, #80]	; (8003b88 <MX_USART1_UART_Init+0x58>)
 8003b36:	4a15      	ldr	r2, [pc, #84]	; (8003b8c <MX_USART1_UART_Init+0x5c>)
 8003b38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003b3a:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <MX_USART1_UART_Init+0x58>)
 8003b3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003b40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b42:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <MX_USART1_UART_Init+0x58>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b48:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <MX_USART1_UART_Init+0x58>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <MX_USART1_UART_Init+0x58>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <MX_USART1_UART_Init+0x58>)
 8003b56:	220c      	movs	r2, #12
 8003b58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <MX_USART1_UART_Init+0x58>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b60:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <MX_USART1_UART_Init+0x58>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b66:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <MX_USART1_UART_Init+0x58>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b6c:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <MX_USART1_UART_Init+0x58>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b72:	4805      	ldr	r0, [pc, #20]	; (8003b88 <MX_USART1_UART_Init+0x58>)
 8003b74:	f7ff f900 	bl	8002d78 <HAL_UART_Init>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003b7e:	f000 f8cd 	bl	8003d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000078 	.word	0x20000078
 8003b8c:	40013800 	.word	0x40013800

08003b90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b94:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <MX_USART2_UART_Init+0x58>)
 8003b96:	4a15      	ldr	r2, [pc, #84]	; (8003bec <MX_USART2_UART_Init+0x5c>)
 8003b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <MX_USART2_UART_Init+0x58>)
 8003b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ba2:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <MX_USART2_UART_Init+0x58>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ba8:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <MX_USART2_UART_Init+0x58>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003bae:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <MX_USART2_UART_Init+0x58>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <MX_USART2_UART_Init+0x58>)
 8003bb6:	220c      	movs	r2, #12
 8003bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bba:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <MX_USART2_UART_Init+0x58>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bc0:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <MX_USART2_UART_Init+0x58>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bc6:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <MX_USART2_UART_Init+0x58>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <MX_USART2_UART_Init+0x58>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003bd2:	4805      	ldr	r0, [pc, #20]	; (8003be8 <MX_USART2_UART_Init+0x58>)
 8003bd4:	f7ff f8d0 	bl	8002d78 <HAL_UART_Init>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003bde:	f000 f89d 	bl	8003d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003be2:	bf00      	nop
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20000100 	.word	0x20000100
 8003bec:	40004400 	.word	0x40004400

08003bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf6:	f107 030c 	add.w	r3, r7, #12
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	605a      	str	r2, [r3, #4]
 8003c00:	609a      	str	r2, [r3, #8]
 8003c02:	60da      	str	r2, [r3, #12]
 8003c04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c06:	4b43      	ldr	r3, [pc, #268]	; (8003d14 <MX_GPIO_Init+0x124>)
 8003c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0a:	4a42      	ldr	r2, [pc, #264]	; (8003d14 <MX_GPIO_Init+0x124>)
 8003c0c:	f043 0304 	orr.w	r3, r3, #4
 8003c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c12:	4b40      	ldr	r3, [pc, #256]	; (8003d14 <MX_GPIO_Init+0x124>)
 8003c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1e:	4b3d      	ldr	r3, [pc, #244]	; (8003d14 <MX_GPIO_Init+0x124>)
 8003c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c22:	4a3c      	ldr	r2, [pc, #240]	; (8003d14 <MX_GPIO_Init+0x124>)
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c2a:	4b3a      	ldr	r3, [pc, #232]	; (8003d14 <MX_GPIO_Init+0x124>)
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	607b      	str	r3, [r7, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c36:	4b37      	ldr	r3, [pc, #220]	; (8003d14 <MX_GPIO_Init+0x124>)
 8003c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3a:	4a36      	ldr	r2, [pc, #216]	; (8003d14 <MX_GPIO_Init+0x124>)
 8003c3c:	f043 0302 	orr.w	r3, r3, #2
 8003c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c42:	4b34      	ldr	r3, [pc, #208]	; (8003d14 <MX_GPIO_Init+0x124>)
 8003c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	603b      	str	r3, [r7, #0]
 8003c4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2190      	movs	r1, #144	; 0x90
 8003c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c56:	f7fc ff3f 	bl	8000ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|LD3_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	212a      	movs	r1, #42	; 0x2a
 8003c5e:	482e      	ldr	r0, [pc, #184]	; (8003d18 <MX_GPIO_Init+0x128>)
 8003c60:	f7fc ff3a 	bl	8000ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8003c64:	2390      	movs	r3, #144	; 0x90
 8003c66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c74:	f107 030c 	add.w	r3, r7, #12
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c7e:	f7fc fda9 	bl	80007d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_FM_In_Pin PA6 GPIO_IN_LE_Pin GPIO_IN_RE_Pin
                           GPIO_FL_In_Pin */
  GPIO_InitStruct.Pin = GPIO_FM_In_Pin|GPIO_PIN_6|GPIO_IN_LE_Pin|GPIO_IN_RE_Pin
 8003c82:	f44f 53cb 	mov.w	r3, #6496	; 0x1960
 8003c86:	60fb      	str	r3, [r7, #12]
                          |GPIO_FL_In_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c90:	f107 030c 	add.w	r3, r7, #12
 8003c94:	4619      	mov	r1, r3
 8003c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c9a:	f7fc fd9b 	bl	80007d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI0_LE_Pin GPIO_EXTI7_RE_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI0_LE_Pin|GPIO_EXTI7_RE_Pin;
 8003c9e:	2381      	movs	r3, #129	; 0x81
 8003ca0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ca2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cac:	f107 030c 	add.w	r3, r7, #12
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4819      	ldr	r0, [pc, #100]	; (8003d18 <MX_GPIO_Init+0x128>)
 8003cb4:	f7fc fd8e 	bl	80007d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 LD3_Pin PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD3_Pin|GPIO_PIN_5;
 8003cb8:	232a      	movs	r3, #42	; 0x2a
 8003cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cc8:	f107 030c 	add.w	r3, r7, #12
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4812      	ldr	r0, [pc, #72]	; (8003d18 <MX_GPIO_Init+0x128>)
 8003cd0:	f7fc fd80 	bl	80007d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_FR_In_Pin GPIO_FM_InB6_Pin */
  GPIO_InitStruct.Pin = GPIO_FR_In_Pin|GPIO_FM_InB6_Pin;
 8003cd4:	2350      	movs	r3, #80	; 0x50
 8003cd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ce0:	f107 030c 	add.w	r3, r7, #12
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	480c      	ldr	r0, [pc, #48]	; (8003d18 <MX_GPIO_Init+0x128>)
 8003ce8:	f7fc fd74 	bl	80007d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003cec:	2200      	movs	r2, #0
 8003cee:	2100      	movs	r1, #0
 8003cf0:	2006      	movs	r0, #6
 8003cf2:	f7fc fd38 	bl	8000766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003cf6:	2006      	movs	r0, #6
 8003cf8:	f7fc fd51 	bl	800079e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2100      	movs	r1, #0
 8003d00:	2017      	movs	r0, #23
 8003d02:	f7fc fd30 	bl	8000766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003d06:	2017      	movs	r0, #23
 8003d08:	f7fc fd49 	bl	800079e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d0c:	bf00      	nop
 8003d0e:	3720      	adds	r7, #32
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000
 8003d18:	48000400 	.word	0x48000400

08003d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003d20:	b672      	cpsid	i
}
 8003d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d24:	e7fe      	b.n	8003d24 <Error_Handler+0x8>
	...

08003d28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <HAL_MspInit+0x44>)
 8003d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d32:	4a0e      	ldr	r2, [pc, #56]	; (8003d6c <HAL_MspInit+0x44>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	6613      	str	r3, [r2, #96]	; 0x60
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <HAL_MspInit+0x44>)
 8003d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <HAL_MspInit+0x44>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4a:	4a08      	ldr	r2, [pc, #32]	; (8003d6c <HAL_MspInit+0x44>)
 8003d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d50:	6593      	str	r3, [r2, #88]	; 0x58
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <HAL_MspInit+0x44>)
 8003d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000

08003d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d80:	d10b      	bne.n	8003d9a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d82:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <HAL_TIM_Base_MspInit+0x38>)
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d86:	4a08      	ldr	r2, [pc, #32]	; (8003da8 <HAL_TIM_Base_MspInit+0x38>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d8e:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <HAL_TIM_Base_MspInit+0x38>)
 8003d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003d9a:	bf00      	nop
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40021000 	.word	0x40021000

08003dac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db4:	f107 030c 	add.w	r3, r7, #12
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	60da      	str	r2, [r3, #12]
 8003dc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dcc:	d11c      	bne.n	8003e08 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dce:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <HAL_TIM_MspPostInit+0x64>)
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	4a0f      	ldr	r2, [pc, #60]	; (8003e10 <HAL_TIM_MspPostInit+0x64>)
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dda:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <HAL_TIM_MspPostInit+0x64>)
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	60bb      	str	r3, [r7, #8]
 8003de4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8003de6:	230a      	movs	r3, #10
 8003de8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dea:	2302      	movs	r3, #2
 8003dec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003df6:	2301      	movs	r3, #1
 8003df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dfa:	f107 030c 	add.w	r3, r7, #12
 8003dfe:	4619      	mov	r1, r3
 8003e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e04:	f7fc fce6 	bl	80007d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003e08:	bf00      	nop
 8003e0a:	3720      	adds	r7, #32
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40021000 	.word	0x40021000

08003e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b0a0      	sub	sp, #128	; 0x80
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e1c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	605a      	str	r2, [r3, #4]
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	60da      	str	r2, [r3, #12]
 8003e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e2c:	f107 0318 	add.w	r3, r7, #24
 8003e30:	2254      	movs	r2, #84	; 0x54
 8003e32:	2100      	movs	r1, #0
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 f90a 	bl	800404e <memset>
  if(huart->Instance==USART1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a47      	ldr	r2, [pc, #284]	; (8003f5c <HAL_UART_MspInit+0x148>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d138      	bne.n	8003eb6 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e44:	2301      	movs	r3, #1
 8003e46:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e4c:	f107 0318 	add.w	r3, r7, #24
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fd fd1d 	bl	8001890 <HAL_RCCEx_PeriphCLKConfig>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003e5c:	f7ff ff5e 	bl	8003d1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e60:	4b3f      	ldr	r3, [pc, #252]	; (8003f60 <HAL_UART_MspInit+0x14c>)
 8003e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e64:	4a3e      	ldr	r2, [pc, #248]	; (8003f60 <HAL_UART_MspInit+0x14c>)
 8003e66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e6a:	6613      	str	r3, [r2, #96]	; 0x60
 8003e6c:	4b3c      	ldr	r3, [pc, #240]	; (8003f60 <HAL_UART_MspInit+0x14c>)
 8003e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e78:	4b39      	ldr	r3, [pc, #228]	; (8003f60 <HAL_UART_MspInit+0x14c>)
 8003e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7c:	4a38      	ldr	r2, [pc, #224]	; (8003f60 <HAL_UART_MspInit+0x14c>)
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e84:	4b36      	ldr	r3, [pc, #216]	; (8003f60 <HAL_UART_MspInit+0x14c>)
 8003e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003e90:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003e94:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e96:	2302      	movs	r3, #2
 8003e98:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ea2:	2307      	movs	r3, #7
 8003ea4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ea6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eb0:	f7fc fc90 	bl	80007d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003eb4:	e04d      	b.n	8003f52 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a2a      	ldr	r2, [pc, #168]	; (8003f64 <HAL_UART_MspInit+0x150>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d148      	bne.n	8003f52 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ec8:	f107 0318 	add.w	r3, r7, #24
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fd fcdf 	bl	8001890 <HAL_RCCEx_PeriphCLKConfig>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8003ed8:	f7ff ff20 	bl	8003d1c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003edc:	4b20      	ldr	r3, [pc, #128]	; (8003f60 <HAL_UART_MspInit+0x14c>)
 8003ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee0:	4a1f      	ldr	r2, [pc, #124]	; (8003f60 <HAL_UART_MspInit+0x14c>)
 8003ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ee6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ee8:	4b1d      	ldr	r3, [pc, #116]	; (8003f60 <HAL_UART_MspInit+0x14c>)
 8003eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ef4:	4b1a      	ldr	r3, [pc, #104]	; (8003f60 <HAL_UART_MspInit+0x14c>)
 8003ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef8:	4a19      	ldr	r2, [pc, #100]	; (8003f60 <HAL_UART_MspInit+0x14c>)
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f00:	4b17      	ldr	r3, [pc, #92]	; (8003f60 <HAL_UART_MspInit+0x14c>)
 8003f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f10:	2302      	movs	r3, #2
 8003f12:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f1c:	2307      	movs	r3, #7
 8003f1e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003f20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f24:	4619      	mov	r1, r3
 8003f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f2a:	f7fc fc53 	bl	80007d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f32:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f34:	2302      	movs	r3, #2
 8003f36:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003f40:	2303      	movs	r3, #3
 8003f42:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003f44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f48:	4619      	mov	r1, r3
 8003f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f4e:	f7fc fc41 	bl	80007d4 <HAL_GPIO_Init>
}
 8003f52:	bf00      	nop
 8003f54:	3780      	adds	r7, #128	; 0x80
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40013800 	.word	0x40013800
 8003f60:	40021000 	.word	0x40021000
 8003f64:	40004400 	.word	0x40004400

08003f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f6c:	e7fe      	b.n	8003f6c <NMI_Handler+0x4>

08003f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f72:	e7fe      	b.n	8003f72 <HardFault_Handler+0x4>

08003f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f78:	e7fe      	b.n	8003f78 <MemManage_Handler+0x4>

08003f7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f7e:	e7fe      	b.n	8003f7e <BusFault_Handler+0x4>

08003f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f84:	e7fe      	b.n	8003f84 <UsageFault_Handler+0x4>

08003f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f86:	b480      	push	{r7}
 8003f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f98:	bf00      	nop
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fa6:	bf00      	nop
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fb4:	f7fc fadc 	bl	8000570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fb8:	bf00      	nop
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI0_LE_Pin);
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	f7fc fda1 	bl	8000b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003fc6:	bf00      	nop
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI7_RE_Pin);
 8003fce:	2080      	movs	r0, #128	; 0x80
 8003fd0:	f7fc fd9a 	bl	8000b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003fd4:	bf00      	nop
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <SystemInit+0x20>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe2:	4a05      	ldr	r2, [pc, #20]	; (8003ff8 <SystemInit+0x20>)
 8003fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003fec:	bf00      	nop
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	e000ed00 	.word	0xe000ed00

08003ffc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004034 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004000:	f7ff ffea 	bl	8003fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004004:	480c      	ldr	r0, [pc, #48]	; (8004038 <LoopForever+0x6>)
  ldr r1, =_edata
 8004006:	490d      	ldr	r1, [pc, #52]	; (800403c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004008:	4a0d      	ldr	r2, [pc, #52]	; (8004040 <LoopForever+0xe>)
  movs r3, #0
 800400a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800400c:	e002      	b.n	8004014 <LoopCopyDataInit>

0800400e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800400e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004012:	3304      	adds	r3, #4

08004014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004018:	d3f9      	bcc.n	800400e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800401a:	4a0a      	ldr	r2, [pc, #40]	; (8004044 <LoopForever+0x12>)
  ldr r4, =_ebss
 800401c:	4c0a      	ldr	r4, [pc, #40]	; (8004048 <LoopForever+0x16>)
  movs r3, #0
 800401e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004020:	e001      	b.n	8004026 <LoopFillZerobss>

08004022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004024:	3204      	adds	r2, #4

08004026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004028:	d3fb      	bcc.n	8004022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800402a:	f000 f819 	bl	8004060 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800402e:	f7ff fc81 	bl	8003934 <main>

08004032 <LoopForever>:

LoopForever:
    b LoopForever
 8004032:	e7fe      	b.n	8004032 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004034:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800403c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004040:	08004118 	.word	0x08004118
  ldr r2, =_sbss
 8004044:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8004048:	20000194 	.word	0x20000194

0800404c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800404c:	e7fe      	b.n	800404c <ADC1_IRQHandler>

0800404e <memset>:
 800404e:	4402      	add	r2, r0
 8004050:	4603      	mov	r3, r0
 8004052:	4293      	cmp	r3, r2
 8004054:	d100      	bne.n	8004058 <memset+0xa>
 8004056:	4770      	bx	lr
 8004058:	f803 1b01 	strb.w	r1, [r3], #1
 800405c:	e7f9      	b.n	8004052 <memset+0x4>
	...

08004060 <__libc_init_array>:
 8004060:	b570      	push	{r4, r5, r6, lr}
 8004062:	4d0d      	ldr	r5, [pc, #52]	; (8004098 <__libc_init_array+0x38>)
 8004064:	4c0d      	ldr	r4, [pc, #52]	; (800409c <__libc_init_array+0x3c>)
 8004066:	1b64      	subs	r4, r4, r5
 8004068:	10a4      	asrs	r4, r4, #2
 800406a:	2600      	movs	r6, #0
 800406c:	42a6      	cmp	r6, r4
 800406e:	d109      	bne.n	8004084 <__libc_init_array+0x24>
 8004070:	4d0b      	ldr	r5, [pc, #44]	; (80040a0 <__libc_init_array+0x40>)
 8004072:	4c0c      	ldr	r4, [pc, #48]	; (80040a4 <__libc_init_array+0x44>)
 8004074:	f000 f818 	bl	80040a8 <_init>
 8004078:	1b64      	subs	r4, r4, r5
 800407a:	10a4      	asrs	r4, r4, #2
 800407c:	2600      	movs	r6, #0
 800407e:	42a6      	cmp	r6, r4
 8004080:	d105      	bne.n	800408e <__libc_init_array+0x2e>
 8004082:	bd70      	pop	{r4, r5, r6, pc}
 8004084:	f855 3b04 	ldr.w	r3, [r5], #4
 8004088:	4798      	blx	r3
 800408a:	3601      	adds	r6, #1
 800408c:	e7ee      	b.n	800406c <__libc_init_array+0xc>
 800408e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004092:	4798      	blx	r3
 8004094:	3601      	adds	r6, #1
 8004096:	e7f2      	b.n	800407e <__libc_init_array+0x1e>
 8004098:	08004110 	.word	0x08004110
 800409c:	08004110 	.word	0x08004110
 80040a0:	08004110 	.word	0x08004110
 80040a4:	08004114 	.word	0x08004114

080040a8 <_init>:
 80040a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040aa:	bf00      	nop
 80040ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ae:	bc08      	pop	{r3}
 80040b0:	469e      	mov	lr, r3
 80040b2:	4770      	bx	lr

080040b4 <_fini>:
 80040b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b6:	bf00      	nop
 80040b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ba:	bc08      	pop	{r3}
 80040bc:	469e      	mov	lr, r3
 80040be:	4770      	bx	lr
